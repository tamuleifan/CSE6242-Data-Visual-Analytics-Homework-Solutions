<!DOCTYPE html>
<!-- saved from url=(0127)https://docs.google.com/document/d/e/2PACX-1vT8QgiqTMxDOle5EHnZfoUSRBFAKJ7QPfMibO0h6Jr5NID7e5aBIO3-cCRcEgtcxlGeFRoXZ3sAXGnr/pub -->
<html class="cye-disabled cye-lm gr__docs_google_com"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>cse6242-2019spring-hw4</title><link rel="shortcut icon" href="https://ssl.gstatic.com/docs/documents/images/kix-favicon7.ico"><style id="nightModeStyle">
html.cye-enabled.cye-nm:not(*:-webkit-full-screen) body,
 html.cye-enabled.cye-nm:not(*:-webkit-full-screen) #cye-workaround-body {-webkit-filter:contrast(91%) brightness(84%) invert(1);}</style><style id="cyebody">html.cye-enabled.cye-lm body{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyediv">html.cye-enabled.cye-lm div{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyetable">html.cye-enabled.cye-lm th{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}html.cye-enabled.cye-lm td{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyetextInput">html.cye-enabled.cye-lm input[type=text]{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}html.cye-enabled.cye-lm textarea{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeselect">html.cye-enabled.cye-lm select{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeul">html.cye-enabled.cye-lm ul{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style id="cyeChangeByClick">html.cye-enabled.cye-lm .cye-lm-tag,html.cye-enabled.cye-lm.cye-lm-tag{background-color:#cce8cf !important;border-color:rgb(51, 58, 51) !important;background-image:none !important;color:#000000  !important}</style><style type="text/css" nonce="">
      body {
        font-family: arial, sans, sans-serif;
        margin: 0;
      }

      iframe {
        border: 0;
        frameborder: 0;
        height: 100%;
        width: 100%;
      }

      #header, #footer {
        background: #f0f0f0;
        padding: 10px 10px;
      }

      #header {
        border-bottom: 1px #ccc solid;
      }

      #footer {
        border-top: 1px #ccc solid;
        border-bottom: 1px #ccc solid;
        font-size: 13;
      }

      #contents {
        margin: 6px;
      }

      .dash {
        padding: 0 6px;
      }
    </style></head><div id="cyeBlackMaskLayer" style="background-color: rgb(19, 19, 19); position: fixed; width: 1980px; height: 1080px; z-index: -2147483648;"></div><body data-gr-c-s-loaded="true" style=""><div id="header">cse6242-2019spring-hw4</div><div id="contents"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=Lx1xfUTR4qFjwg0Z_pb90yWRngai5bfEYk6-op_hCuFp286u1FhNCWJx6k_BWUR2');ul.lst-kix_list_1-0{list-style-type:none}.lst-kix_atpom7tmdc5x-8>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-8,lower-roman) ". "}ol.lst-kix_list_12-6.start{counter-reset:lst-ctn-kix_list_12-6 0}ol.lst-kix_list_9-0.start{counter-reset:lst-ctn-kix_list_9-0 0}.lst-kix_atpom7tmdc5x-7>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-7,lower-latin) ". "}.lst-kix_atpom7tmdc5x-6>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-6,decimal) ". "}.lst-kix_list_9-0>li{counter-increment:lst-ctn-kix_list_9-0}.lst-kix_list_11-0>li{counter-increment:lst-ctn-kix_list_11-0}ul.lst-kix_list_1-3{list-style-type:none}ul.lst-kix_list_1-4{list-style-type:none}ul.lst-kix_list_1-1{list-style-type:none}ul.lst-kix_list_1-2{list-style-type:none}ul.lst-kix_list_1-7{list-style-type:none}ol.lst-kix_list_11-8.start{counter-reset:lst-ctn-kix_list_11-8 0}ul.lst-kix_list_1-8{list-style-type:none}ul.lst-kix_list_1-5{list-style-type:none}ul.lst-kix_list_1-6{list-style-type:none}ol.lst-kix_list_9-6.start{counter-reset:lst-ctn-kix_list_9-6 0}ol.lst-kix_list_12-0.start{counter-reset:lst-ctn-kix_list_12-0 0}ol.lst-kix_atpom7tmdc5x-7.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-7 0}.lst-kix_atpom7tmdc5x-6>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-6}.lst-kix_atpom7tmdc5x-3>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-3,decimal) ". "}.lst-kix_atpom7tmdc5x-5>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-5,lower-roman) ". "}ol.lst-kix_list_11-2.start{counter-reset:lst-ctn-kix_list_11-2 0}.lst-kix_atpom7tmdc5x-0>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-0,decimal) ". "}.lst-kix_atpom7tmdc5x-4>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-4,lower-latin) ". "}.lst-kix_atpom7tmdc5x-1>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-1,lower-latin) ". "}ol.lst-kix_atpom7tmdc5x-1.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-1 0}ol.lst-kix_list_10-4.start{counter-reset:lst-ctn-kix_list_10-4 0}.lst-kix_atpom7tmdc5x-2>li:before{content:"" counter(lst-ctn-kix_atpom7tmdc5x-2,lower-roman) ". "}.lst-kix_list_9-2>li{counter-increment:lst-ctn-kix_list_9-2}.lst-kix_list_5-0>li:before{content:"-  "}.lst-kix_list_5-3>li:before{content:"-  "}ol.lst-kix_list_9-5.start{counter-reset:lst-ctn-kix_list_9-5 0}.lst-kix_list_5-2>li:before{content:"-  "}.lst-kix_list_5-1>li:before{content:"-  "}.lst-kix_list_5-7>li:before{content:"-  "}ul.lst-kix_list_8-4{list-style-type:none}ul.lst-kix_list_8-5{list-style-type:none}.lst-kix_list_5-6>li:before{content:"-  "}.lst-kix_list_5-8>li:before{content:"-  "}ul.lst-kix_list_8-2{list-style-type:none}ul.lst-kix_list_8-3{list-style-type:none}ul.lst-kix_list_8-8{list-style-type:none}ul.lst-kix_list_8-6{list-style-type:none}ul.lst-kix_list_8-7{list-style-type:none}.lst-kix_list_9-4>li{counter-increment:lst-ctn-kix_list_9-4}.lst-kix_list_5-4>li:before{content:"-  "}.lst-kix_list_5-5>li:before{content:"-  "}ul.lst-kix_list_8-0{list-style-type:none}ul.lst-kix_list_8-1{list-style-type:none}.lst-kix_list_10-3>li{counter-increment:lst-ctn-kix_list_10-3}.lst-kix_list_12-1>li{counter-increment:lst-ctn-kix_list_12-1}ol.lst-kix_list_12-5.start{counter-reset:lst-ctn-kix_list_12-5 0}.lst-kix_list_6-1>li:before{content:"-  "}.lst-kix_list_6-3>li:before{content:"-  "}.lst-kix_list_6-0>li:before{content:"-  "}.lst-kix_list_6-4>li:before{content:"-  "}ol.lst-kix_list_4-0.start{counter-reset:lst-ctn-kix_list_4-0 0}.lst-kix_list_6-2>li:before{content:"-  "}ol.lst-kix_atpom7tmdc5x-6.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-6 0}.lst-kix_list_6-8>li:before{content:"-  "}.lst-kix_atpom7tmdc5x-4>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-4}ol.lst-kix_list_11-7.start{counter-reset:lst-ctn-kix_list_11-7 0}.lst-kix_list_6-5>li:before{content:"-  "}.lst-kix_list_6-7>li:before{content:"-  "}.lst-kix_list_6-6>li:before{content:"-  "}ol.lst-kix_atpom7tmdc5x-3.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-3 0}ol.lst-kix_list_10-6.start{counter-reset:lst-ctn-kix_list_10-6 0}.lst-kix_list_2-7>li:before{content:"-  "}.lst-kix_list_7-4>li:before{content:"-  "}.lst-kix_list_7-6>li:before{content:"-  "}.lst-kix_list_2-5>li:before{content:"-  "}.lst-kix_list_7-2>li:before{content:"-  "}ol.lst-kix_list_10-3.start{counter-reset:lst-ctn-kix_list_10-3 0}ol.lst-kix_atpom7tmdc5x-0.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-0 0}ol.lst-kix_list_9-4.start{counter-reset:lst-ctn-kix_list_9-4 0}ul.lst-kix_list_3-7{list-style-type:none}.lst-kix_list_12-6>li{counter-increment:lst-ctn-kix_list_12-6}ul.lst-kix_list_3-8{list-style-type:none}ol.lst-kix_list_9-7{list-style-type:none}.lst-kix_list_10-1>li:before{content:"" counter(lst-ctn-kix_list_10-1,lower-latin) ". "}ol.lst-kix_list_9-8{list-style-type:none}ol.lst-kix_list_9-3{list-style-type:none}ul.lst-kix_list_3-1{list-style-type:none}ol.lst-kix_list_9-4{list-style-type:none}ul.lst-kix_list_3-2{list-style-type:none}ol.lst-kix_list_9-5{list-style-type:none}.lst-kix_list_7-8>li:before{content:"-  "}ol.lst-kix_list_9-6{list-style-type:none}ul.lst-kix_list_3-0{list-style-type:none}ul.lst-kix_list_3-5{list-style-type:none}ol.lst-kix_list_9-0{list-style-type:none}ul.lst-kix_list_3-6{list-style-type:none}ol.lst-kix_list_9-1{list-style-type:none}ul.lst-kix_list_3-3{list-style-type:none}ol.lst-kix_list_9-2{list-style-type:none}ul.lst-kix_list_3-4{list-style-type:none}.lst-kix_list_10-7>li:before{content:"" counter(lst-ctn-kix_list_10-7,lower-latin) ". "}.lst-kix_list_10-5>li:before{content:"" counter(lst-ctn-kix_list_10-5,lower-roman) ". "}.lst-kix_list_9-8>li{counter-increment:lst-ctn-kix_list_9-8}.lst-kix_list_10-3>li:before{content:"" counter(lst-ctn-kix_list_10-3,decimal) ". "}.lst-kix_list_4-1>li:before{content:"\0025cb  "}.lst-kix_list_11-7>li{counter-increment:lst-ctn-kix_list_11-7}.lst-kix_list_9-2>li:before{content:"" counter(lst-ctn-kix_list_9-2,lower-roman) ". "}.lst-kix_list_4-3>li:before{content:"\0025cf  "}.lst-kix_list_4-5>li:before{content:"\0025a0  "}.lst-kix_list_10-5>li{counter-increment:lst-ctn-kix_list_10-5}.lst-kix_list_12-5>li{counter-increment:lst-ctn-kix_list_12-5}.lst-kix_list_9-0>li:before{content:"" counter(lst-ctn-kix_list_9-0,decimal) ". "}.lst-kix_atpom7tmdc5x-8>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-8}ol.lst-kix_list_10-7{list-style-type:none}ol.lst-kix_list_9-2.start{counter-reset:lst-ctn-kix_list_9-2 0}.lst-kix_list_9-6>li:before{content:"" counter(lst-ctn-kix_list_9-6,decimal) ". "}ol.lst-kix_list_10-8{list-style-type:none}.lst-kix_list_9-3>li{counter-increment:lst-ctn-kix_list_9-3}ol.lst-kix_list_10-3{list-style-type:none}.lst-kix_list_11-2>li{counter-increment:lst-ctn-kix_list_11-2}.lst-kix_list_9-4>li:before{content:"" counter(lst-ctn-kix_list_9-4,lower-latin) ". "}ol.lst-kix_list_10-4{list-style-type:none}ol.lst-kix_list_10-5{list-style-type:none}.lst-kix_list_11-3>li:before{content:"" counter(lst-ctn-kix_list_11-3,decimal) ". "}ol.lst-kix_list_10-6{list-style-type:none}ol.lst-kix_list_10-0{list-style-type:none}ol.lst-kix_list_10-1{list-style-type:none}ul.lst-kix_list_2-8{list-style-type:none}ol.lst-kix_list_10-2{list-style-type:none}ol.lst-kix_list_12-1.start{counter-reset:lst-ctn-kix_list_12-1 0}.lst-kix_list_12-3>li:before{content:"" counter(lst-ctn-kix_list_12-3,decimal) ". "}.lst-kix_list_11-5>li:before{content:"" counter(lst-ctn-kix_list_11-5,lower-roman) ". "}.lst-kix_list_12-1>li:before{content:"" counter(lst-ctn-kix_list_12-1,lower-latin) ". "}ul.lst-kix_list_2-2{list-style-type:none}ul.lst-kix_list_2-3{list-style-type:none}ul.lst-kix_list_2-0{list-style-type:none}ul.lst-kix_list_2-1{list-style-type:none}.lst-kix_list_9-8>li:before{content:"" counter(lst-ctn-kix_list_9-8,lower-roman) ". "}ul.lst-kix_list_2-6{list-style-type:none}.lst-kix_list_1-1>li:before{content:"\0025cb  "}ul.lst-kix_list_2-7{list-style-type:none}.lst-kix_list_11-7>li:before{content:"" counter(lst-ctn-kix_list_11-7,lower-latin) ". "}ul.lst-kix_list_2-4{list-style-type:none}.lst-kix_atpom7tmdc5x-2>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-2}ul.lst-kix_list_2-5{list-style-type:none}.lst-kix_list_1-3>li:before{content:"\0025cf  "}.lst-kix_list_10-4>li{counter-increment:lst-ctn-kix_list_10-4}ol.lst-kix_list_10-5.start{counter-reset:lst-ctn-kix_list_10-5 0}ol.lst-kix_atpom7tmdc5x-2.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-2 0}.lst-kix_list_1-7>li:before{content:"\0025cb  "}.lst-kix_list_1-5>li:before{content:"\0025a0  "}ol.lst-kix_list_9-1.start{counter-reset:lst-ctn-kix_list_9-1 0}ol.lst-kix_atpom7tmdc5x-2{list-style-type:none}.lst-kix_list_12-5>li:before{content:"" counter(lst-ctn-kix_list_12-5,lower-roman) ". "}ol.lst-kix_atpom7tmdc5x-3{list-style-type:none}ol.lst-kix_atpom7tmdc5x-0{list-style-type:none}ol.lst-kix_atpom7tmdc5x-1{list-style-type:none}ol.lst-kix_list_12-2.start{counter-reset:lst-ctn-kix_list_12-2 0}ol.lst-kix_atpom7tmdc5x-6{list-style-type:none}.lst-kix_list_12-7>li:before{content:"" counter(lst-ctn-kix_list_12-7,lower-latin) ". "}ol.lst-kix_atpom7tmdc5x-7{list-style-type:none}.lst-kix_list_2-1>li:before{content:"-  "}ol.lst-kix_atpom7tmdc5x-4{list-style-type:none}ol.lst-kix_atpom7tmdc5x-5{list-style-type:none}.lst-kix_list_2-3>li:before{content:"-  "}ol.lst-kix_atpom7tmdc5x-8{list-style-type:none}.lst-kix_list_11-8>li{counter-increment:lst-ctn-kix_list_11-8}.lst-kix_atpom7tmdc5x-5>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-5}ol.lst-kix_list_11-6{list-style-type:none}ol.lst-kix_list_11-7{list-style-type:none}ol.lst-kix_list_11-8{list-style-type:none}.lst-kix_list_9-1>li{counter-increment:lst-ctn-kix_list_9-1}ol.lst-kix_list_11-2{list-style-type:none}ol.lst-kix_list_11-3{list-style-type:none}.lst-kix_list_3-0>li:before{content:"\00274f  "}ol.lst-kix_list_11-4{list-style-type:none}ol.lst-kix_list_11-5{list-style-type:none}ul.lst-kix_list_5-7{list-style-type:none}ul.lst-kix_list_5-8{list-style-type:none}.lst-kix_list_3-1>li:before{content:"\00274f  "}.lst-kix_list_3-2>li:before{content:"\00274f  "}ul.lst-kix_list_5-5{list-style-type:none}ol.lst-kix_list_11-0{list-style-type:none}ul.lst-kix_list_5-6{list-style-type:none}ol.lst-kix_list_11-1{list-style-type:none}.lst-kix_list_8-1>li:before{content:"\0025cb  "}.lst-kix_list_4-0>li{counter-increment:lst-ctn-kix_list_4-0}.lst-kix_list_8-2>li:before{content:"\0025a0  "}.lst-kix_list_3-5>li:before{content:"\00274f  "}ul.lst-kix_list_5-0{list-style-type:none}.lst-kix_list_10-0>li{counter-increment:lst-ctn-kix_list_10-0}.lst-kix_list_12-0>li{counter-increment:lst-ctn-kix_list_12-0}.lst-kix_list_3-4>li:before{content:"\00274f  "}ol.lst-kix_list_12-3.start{counter-reset:lst-ctn-kix_list_12-3 0}ul.lst-kix_list_5-3{list-style-type:none}.lst-kix_list_3-3>li:before{content:"\00274f  "}ul.lst-kix_list_5-4{list-style-type:none}ul.lst-kix_list_5-1{list-style-type:none}.lst-kix_list_8-0>li:before{content:"\0025cf  "}ul.lst-kix_list_5-2{list-style-type:none}.lst-kix_list_8-7>li:before{content:"\0025cb  "}ol.lst-kix_list_11-5.start{counter-reset:lst-ctn-kix_list_11-5 0}.lst-kix_list_3-8>li:before{content:"\00274f  "}.lst-kix_list_8-5>li:before{content:"\0025a0  "}ol.lst-kix_list_10-7.start{counter-reset:lst-ctn-kix_list_10-7 0}.lst-kix_list_11-1>li{counter-increment:lst-ctn-kix_list_11-1}.lst-kix_list_8-6>li:before{content:"\0025cf  "}ol.lst-kix_atpom7tmdc5x-4.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-4 0}.lst-kix_list_8-3>li:before{content:"\0025cf  "}.lst-kix_list_3-6>li:before{content:"\00274f  "}.lst-kix_atpom7tmdc5x-3>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-3}.lst-kix_list_3-7>li:before{content:"\00274f  "}.lst-kix_list_8-4>li:before{content:"\0025cb  "}.lst-kix_list_11-2>li:before{content:"" counter(lst-ctn-kix_list_11-2,lower-roman) ". "}.lst-kix_list_10-2>li{counter-increment:lst-ctn-kix_list_10-2}.lst-kix_list_11-1>li:before{content:"" counter(lst-ctn-kix_list_11-1,lower-latin) ". "}.lst-kix_list_11-0>li:before{content:"" counter(lst-ctn-kix_list_11-0,decimal) ". "}ol.lst-kix_list_9-3.start{counter-reset:lst-ctn-kix_list_9-3 0}.lst-kix_list_8-8>li:before{content:"\0025a0  "}ol.lst-kix_list_11-6.start{counter-reset:lst-ctn-kix_list_11-6 0}ol.lst-kix_list_12-4.start{counter-reset:lst-ctn-kix_list_12-4 0}ol.lst-kix_list_10-1.start{counter-reset:lst-ctn-kix_list_10-1 0}.lst-kix_list_4-8>li:before{content:"\0025a0  "}ol.lst-kix_list_12-5{list-style-type:none}ol.lst-kix_list_12-6{list-style-type:none}.lst-kix_list_4-7>li:before{content:"\0025cb  "}ol.lst-kix_list_12-7{list-style-type:none}ol.lst-kix_list_12-8{list-style-type:none}ol.lst-kix_list_12-1{list-style-type:none}ol.lst-kix_list_12-2{list-style-type:none}ol.lst-kix_list_12-3{list-style-type:none}ol.lst-kix_list_12-4{list-style-type:none}ul.lst-kix_list_4-8{list-style-type:none}ul.lst-kix_list_4-6{list-style-type:none}ul.lst-kix_list_4-7{list-style-type:none}ol.lst-kix_list_12-0{list-style-type:none}ul.lst-kix_list_4-1{list-style-type:none}ol.lst-kix_list_10-8.start{counter-reset:lst-ctn-kix_list_10-8 0}ul.lst-kix_list_4-4{list-style-type:none}ul.lst-kix_list_4-5{list-style-type:none}ol.lst-kix_atpom7tmdc5x-5.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-5 0}ul.lst-kix_list_4-2{list-style-type:none}ul.lst-kix_list_4-3{list-style-type:none}.lst-kix_list_11-3>li{counter-increment:lst-ctn-kix_list_11-3}.lst-kix_list_12-4>li{counter-increment:lst-ctn-kix_list_12-4}ol.lst-kix_list_11-0.start{counter-reset:lst-ctn-kix_list_11-0 0}.lst-kix_atpom7tmdc5x-1>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-1}ol.lst-kix_list_10-2.start{counter-reset:lst-ctn-kix_list_10-2 0}.lst-kix_list_12-7>li{counter-increment:lst-ctn-kix_list_12-7}.lst-kix_list_7-0>li:before{content:"-  "}.lst-kix_atpom7tmdc5x-7>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-7}.lst-kix_list_2-6>li:before{content:"-  "}ol.lst-kix_list_9-7.start{counter-reset:lst-ctn-kix_list_9-7 0}.lst-kix_list_2-4>li:before{content:"-  "}.lst-kix_list_2-8>li:before{content:"-  "}.lst-kix_list_7-1>li:before{content:"-  "}.lst-kix_list_7-5>li:before{content:"-  "}.lst-kix_list_9-6>li{counter-increment:lst-ctn-kix_list_9-6}.lst-kix_list_7-3>li:before{content:"-  "}ol.lst-kix_list_11-1.start{counter-reset:lst-ctn-kix_list_11-1 0}ul.lst-kix_list_7-5{list-style-type:none}.lst-kix_list_10-0>li:before{content:"" counter(lst-ctn-kix_list_10-0,decimal) ". "}ul.lst-kix_list_7-6{list-style-type:none}ul.lst-kix_list_7-3{list-style-type:none}.lst-kix_list_9-7>li{counter-increment:lst-ctn-kix_list_9-7}ul.lst-kix_list_7-4{list-style-type:none}ul.lst-kix_list_7-7{list-style-type:none}ul.lst-kix_list_7-8{list-style-type:none}.lst-kix_list_10-6>li{counter-increment:lst-ctn-kix_list_10-6}.lst-kix_list_11-6>li{counter-increment:lst-ctn-kix_list_11-6}ul.lst-kix_list_7-1{list-style-type:none}ul.lst-kix_list_7-2{list-style-type:none}ul.lst-kix_list_7-0{list-style-type:none}.lst-kix_list_7-7>li:before{content:"-  "}ol.lst-kix_list_10-0.start{counter-reset:lst-ctn-kix_list_10-0 0}.lst-kix_list_11-4>li{counter-increment:lst-ctn-kix_list_11-4}.lst-kix_list_9-5>li{counter-increment:lst-ctn-kix_list_9-5}.lst-kix_list_10-4>li:before{content:"" counter(lst-ctn-kix_list_10-4,lower-latin) ". "}.lst-kix_list_10-8>li:before{content:"" counter(lst-ctn-kix_list_10-8,lower-roman) ". "}.lst-kix_list_4-0>li:before{content:"" counter(lst-ctn-kix_list_4-0,decimal) ". "}.lst-kix_list_10-2>li:before{content:"" counter(lst-ctn-kix_list_10-2,lower-roman) ". "}.lst-kix_list_4-4>li:before{content:"\0025cb  "}.lst-kix_list_4-2>li:before{content:"\0025a0  "}.lst-kix_list_4-6>li:before{content:"\0025cf  "}.lst-kix_list_9-3>li:before{content:"" counter(lst-ctn-kix_list_9-3,decimal) ". "}.lst-kix_atpom7tmdc5x-0>li{counter-increment:lst-ctn-kix_atpom7tmdc5x-0}.lst-kix_list_12-8>li{counter-increment:lst-ctn-kix_list_12-8}.lst-kix_list_10-8>li{counter-increment:lst-ctn-kix_list_10-8}.lst-kix_list_10-6>li:before{content:"" counter(lst-ctn-kix_list_10-6,decimal) ". "}.lst-kix_list_9-1>li:before{content:"" counter(lst-ctn-kix_list_9-1,lower-latin) ". "}ol.lst-kix_list_12-7.start{counter-reset:lst-ctn-kix_list_12-7 0}ol.lst-kix_list_4-0{list-style-type:none}.lst-kix_list_9-7>li:before{content:"" counter(lst-ctn-kix_list_9-7,lower-latin) ". "}.lst-kix_list_12-2>li{counter-increment:lst-ctn-kix_list_12-2}ol.lst-kix_atpom7tmdc5x-8.start{counter-reset:lst-ctn-kix_atpom7tmdc5x-8 0}.lst-kix_list_11-4>li:before{content:"" counter(lst-ctn-kix_list_11-4,lower-latin) ". "}.lst-kix_list_12-4>li:before{content:"" counter(lst-ctn-kix_list_12-4,lower-latin) ". "}.lst-kix_list_9-5>li:before{content:"" counter(lst-ctn-kix_list_9-5,lower-roman) ". "}ul.lst-kix_list_6-6{list-style-type:none}ul.lst-kix_list_6-7{list-style-type:none}ul.lst-kix_list_6-4{list-style-type:none}ul.lst-kix_list_6-5{list-style-type:none}ul.lst-kix_list_6-8{list-style-type:none}.lst-kix_list_12-2>li:before{content:"" counter(lst-ctn-kix_list_12-2,lower-roman) ". "}ol.lst-kix_list_12-8.start{counter-reset:lst-ctn-kix_list_12-8 0}.lst-kix_list_11-6>li:before{content:"" counter(lst-ctn-kix_list_11-6,decimal) ". "}.lst-kix_list_1-0>li:before{content:"\0025cf  "}ul.lst-kix_list_6-2{list-style-type:none}.lst-kix_list_11-8>li:before{content:"" counter(lst-ctn-kix_list_11-8,lower-roman) ". "}.lst-kix_list_12-3>li{counter-increment:lst-ctn-kix_list_12-3}ul.lst-kix_list_6-3{list-style-type:none}ol.lst-kix_list_11-3.start{counter-reset:lst-ctn-kix_list_11-3 0}.lst-kix_list_1-2>li:before{content:"\0025a0  "}ul.lst-kix_list_6-0{list-style-type:none}.lst-kix_list_12-0>li:before{content:"" counter(lst-ctn-kix_list_12-0,decimal) ". "}ul.lst-kix_list_6-1{list-style-type:none}.lst-kix_list_1-4>li:before{content:"\0025cb  "}.lst-kix_list_10-1>li{counter-increment:lst-ctn-kix_list_10-1}.lst-kix_list_1-6>li:before{content:"\0025cf  "}.lst-kix_list_10-7>li{counter-increment:lst-ctn-kix_list_10-7}.lst-kix_list_2-0>li:before{content:"-  "}.lst-kix_list_12-6>li:before{content:"" counter(lst-ctn-kix_list_12-6,decimal) ". "}.lst-kix_list_11-5>li{counter-increment:lst-ctn-kix_list_11-5}ol.lst-kix_list_11-4.start{counter-reset:lst-ctn-kix_list_11-4 0}ol.lst-kix_list_9-8.start{counter-reset:lst-ctn-kix_list_9-8 0}.lst-kix_list_1-8>li:before{content:"\0025a0  "}.lst-kix_list_2-2>li:before{content:"-  "}.lst-kix_list_12-8>li:before{content:"" counter(lst-ctn-kix_list_12-8,lower-roman) ". "}ol{margin:0;padding:0}table td,table th{padding:0}.c57{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:324.8pt;border-top-color:#000000;border-bottom-style:solid}.c52{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:108.8pt;border-top-color:#000000;border-bottom-style:solid}.c58{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:496.8pt;border-top-color:#000000;border-bottom-style:solid}.c2{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c10{color:#666666;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c11{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c41{padding-top:14pt;padding-bottom:4pt;line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c27{padding-top:12pt;padding-bottom:4pt;line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:justify}.c9{padding-top:16pt;padding-bottom:4pt;line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c5{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;orphans:2;widows:2;text-align:left;height:11pt}.c42{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c13{padding-top:0pt;padding-bottom:0pt;line-height:1.0;orphans:2;widows:2;text-align:left}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;orphans:2;widows:2;text-align:left}.c12{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.38;orphans:2;widows:2;text-align:center}.c34{margin-left:20pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.38;text-align:justify}.c18{text-decoration-skip-ink:none;font-size:10pt;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c16{padding-top:0pt;padding-bottom:0pt;line-height:1.38;text-align:justify;height:11pt}.c82{padding-top:18pt;padding-bottom:4pt;line-height:1.1500000000000001;text-align:left;height:16pt}.c36{color:#666666;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c60{padding-top:18pt;padding-bottom:6pt;line-height:1.1500000000000001;page-break-after:avoid;text-align:justify}.c33{color:#000000;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c32{color:#222222;text-decoration:none;vertical-align:baseline;font-size:10pt;font-style:normal}.c15{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c77{padding-top:0pt;padding-bottom:5pt;line-height:1.1500000000000001;text-align:center}.c51{font-size:10.5pt;font-family:"Roboto";color:#ff0000;font-weight:400}.c17{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;text-align:left}.c50{padding-top:0pt;padding-bottom:72pt;line-height:1.1500000000000001;text-align:left}.c49{padding-top:0pt;padding-bottom:0pt;line-height:1.38;text-align:justify}.c92{padding-top:4pt;padding-bottom:6pt;line-height:1.1500000000000001;text-align:left}.c62{padding-top:0pt;padding-bottom:10pt;line-height:1.1500000000000001;text-align:justify}.c81{padding-top:0pt;padding-bottom:0pt;line-height:1.38;text-align:left}.c74{background-color:#fcfcfb;font-family:"Helvetica Neue";color:#252424;font-weight:400}.c75{padding-top:18pt;padding-bottom:6pt;line-height:1.1500000000000001;text-align:left}.c72{padding-top:14pt;padding-bottom:4pt;line-height:1.1500000000000001;text-align:left}.c31{padding-top:0pt;padding-bottom:0pt;line-height:1.1500000000000001;text-align:justify}.c55{padding-top:16pt;padding-bottom:4pt;line-height:1.1500000000000001;text-align:left}.c44{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:justify}.c63{padding-top:14pt;padding-bottom:4pt;line-height:1.1500000000000001;text-align:justify}.c53{margin-left:-5pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.c23{border-spacing:0;border-collapse:collapse;margin-right:auto}.c88{padding-top:20pt;padding-bottom:5pt;line-height:1.1500000000000001;text-align:center}.c86{padding-top:0pt;padding-bottom:10pt;line-height:1.1500000000000001;text-align:left}.c84{padding-top:18pt;padding-bottom:4pt;line-height:1.1500000000000001;text-align:left}.c76{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c61{color:#000000;vertical-align:baseline;font-style:normal}.c7{background-color:#ffffff;max-width:496.8pt;padding:72pt 57.6pt 72pt 57.6pt}.c24{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;text-decoration:underline}.c47{text-decoration:none;vertical-align:baseline;font-style:normal}.c93{background-color:#fcfcfb;font-weight:400;font-family:"Helvetica Neue"}.c40{font-weight:400;font-family:"Arial"}.c66{margin-left:72pt;padding-left:0pt}.c78{color:#999999;font-size:9pt}.c3{padding:0;margin:0}.c0{color:#cc0000;font-weight:700}.c6{font-weight:400;font-family:"Courier New"}.c29{background-color:#ffffff;color:#222222}.c37{color:inherit;text-decoration:inherit}.c43{orphans:2;widows:2}.c35{width:33%;height:1px}.c19{margin-left:36pt;padding-left:0pt}.c91{height:24pt}.c54{color:#333333}.c64{vertical-align:super}.c67{color:#666666}.c87{font-size:20pt}.c85{color:#434343}.c26{font-size:14pt}.c71{height:14pt}.c30{height:0pt}.c28{color:#1155cc}.c21{font-size:11pt}.c46{font-size:10pt}.c25{height:11pt}.c89{font-size:13.5pt}.c4{font-size:12pt}.c70{page-break-after:avoid}.c56{font-size:10.5pt}.c38{background-color:#ffffff}.c59{color:#6aa84f}.c73{font-size:13pt}.c80{font-family:"Roboto"}.c20{font-weight:700}.c39{text-indent:36pt}.c48{font-family:"Arial"}.c69{color:#000000}.c68{color:#222222}.c45{margin-left:36pt}.c83{color:#980000}.c65{font-size:16pt}.c22{color:#cc0000}.c90{text-decoration:none}.c14{font-style:italic}.c79{color:#ff0000}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.1500000000000001;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style><div><p class="c5"><span class="c11"></span></p></div><h1 class="c43 c70 c88" id="h.gjdgxs"><span class="c12 c87">&nbsp;CSE 6242 / CX 4242: Data and Visual Analytics | Georgia Tech | Spring 2019</span></h1><p class="c43 c77"><span class="c73">Homework 4 : Scalable PageRank via Virtual Memory (MMap), Random Forest, SciKit Learn</span></p><p class="c1"><span>Prepared by our 30+ wonderful TAs of </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://poloclub.github.io/%23cse6242&amp;sa=D&amp;ust=1555470516146000">CSE6242A,Q,OAN,O01,O3/CX4242A</a></span><span class="c11">&nbsp;for our 1200+ students</span></p><p class="c25 c81"><span class="c24 c40 c46 c61"></span></p><p class="c81"><span class="c24">Submission Instructions and Important Notes:</span></p><p class="c49"><span>It is important that you read the following instructions carefully and also those about the deliverables at the end of each question or </span><span class="c0">you may lose points</span><span class="c11">.</span></p><ul class="c3 lst-kix_list_3-0 start"><li class="c34"><span class="c22">Always check to make sure you are using the most up-to-date assignment</span><span class="c11">&nbsp;(version number at bottom right of this document).</span></li><li class="c34"><span>Submit a single zipped file, called “</span><span>HW4-GTusername</span><span>.zip”, containing all the deliverables including source code/scripoints, data files, and readme. Example: “HW4-jdoe3.zip” if GT account username is “jdoe3”. </span><span class="c22">Only .zip is allowed</span><span>&nbsp;(no other format will be accepted). </span><span class="c22">Your GT username is the one with letters and numbers.</span></li><li class="c34"><span>You may discuss high-level ideas with other students at the "whiteboard" level (e.g., how cross validation works, use hashmap instead of array) and review any relevant materials online. </span><span class="c22">However, each student must write up and submit his or her own answers.</span></li><li class="c34"><span>All incidents of suspected dishonesty, plagiarism, or violations of the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://policylibrary.gatech.edu/student-affairs/academic-honor-code&amp;sa=D&amp;ust=1555470516148000">Georgia Tech Honor Code</a></span><span>&nbsp;will be subject to the institute’s Academic Integrity procedures (</span><span class="c83">i.e.</span><span>, reported to and directly handled by the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://osi.gatech.edu/&amp;sa=D&amp;ust=1555470516148000">Office of Student Integrity (OSI)</a></span><span>). </span><span class="c22">Consequences can be severe, e.g., academic probation or dismissal, grade penalties, a 0 grade for assignments concerned, and prohibition from withdrawing from the class</span><span class="c0">.</span></li><li class="c34"><span>At the end of this assignment, we have specified a folder structure </span><span class="c83">you must use </span><span>to organize your files in a single zipped file. </span><span class="c22">5 points will be deducted for not following this strictly.</span></li><li class="c34"><span>In your final zip file, </span><span class="c22">do not include any intermediate files</span><span class="c11">&nbsp;you may have generated to work on the task, unless your script is absolutely dependent on it to get the final result (which it ideally should not be).</span></li><li class="c34"><span class="c11">We may use auto-grading scripts to grade some of your deliverables, so it is extremely important that you strictly follow our requirements.</span></li><li class="c34"><span>Wherever you are asked to write down an explanation for the task you perform, </span><span class="c22">stay within the word limit</span><span class="c11">&nbsp;or you may lose points.</span></li><li class="c34"><span>Every homework assignment deliverable and every project deliverable comes with a 48-hour "grace period". </span><span class="c22">Any deliverable submitted after the grace period will get zero credit. We recommend that you plan to finish by the beginning of the grace period in order to leave yourself time for any unexpected issues which might arise. &nbsp;</span></li><li class="c34"><span class="c22">We</span><span>&nbsp;</span><span class="c22">will not consider late submission of any missing parts</span><span>&nbsp;of a homework assignment or project deliverable. To make sure you have submitted everything, download your submitted files to double check. You may re-submit your work before the grace period expires.</span><span class="c74 c56">&nbsp;</span><span class="c24 c28 c56 c93"><a class="c37" href="https://www.google.com/url?q=https://community.canvaslms.com/docs/DOC-10082&amp;sa=D&amp;ust=1555470516149000">Canvas automatically appends a “version number” to files that you re-submit</a></span><span class="c56 c74">. </span><span>You do not need to worry about these version numbers, and there is no need to delete old submissions. </span><span class="c22">We will only grade the most recent submission.</span></li></ul><p class="c16"><span class="c47 c40 c46 c22"></span></p><p class="c13"><span class="c26 c20">Download the </span><span class="c24 c26 c28 c20"><a class="c37" href="https://www.google.com/url?q=https://poloclub.github.io/cse6242-2019spring-online/hw4/hw4-skeleton.zip&amp;sa=D&amp;ust=1555470516150000">HW4 Skeleton</a></span><span class="c26 c20">&nbsp;before you begin.</span></p><p class="c17 c25"><span class="c47 c0 c4 c48"></span></p><p class="c17"><span class="c33 c26 c20">Grading</span></p><p class="c17 c25"><span class="c26 c20 c33"></span></p><p class="c17"><span>The maximum possible score for this homework is 110 points. </span></p><h2 class="c60" id="h.30j0zll"><span class="c26">Q1 [30 pts] </span><span class="c29 c89">Scalable single-machine PageRank on 70M edge graph</span></h2><p class="c31 c25"><span class="c33 c26 c20"></span></p><p class="c8"><span class="c29">In this question, you will learn how to use your computer’s </span><span class="c24 c28 c38 c20"><a class="c37" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Virtual_memory&amp;sa=D&amp;ust=1555470516151000">virtual memory</a></span><span class="c29 c20">&nbsp;</span><span class="c29">to implement the PageRank algorithm that will scale to graph datasets with </span><span class="c24 c28 c38"><a class="c37" href="https://www.google.com/url?q=http://poloclub.gatech.edu/mmap/%23datasets&amp;sa=D&amp;ust=1555470516151000">as many as billions of edges</a></span><span class="c29">&nbsp;using a single computer (e.g., your laptop). As discussed in lecture, a standard way to work with larger datasets has been to use computer clusters (e.g., Spark, Hadoop) which may involve steep learning curves, may be costly (e.g., pay for hardware and personnel), and importantly may be “overkill” for smaller datasets (e.g., a few tens or hundreds of GBs). The virtual-memory-based approach offers an attractive, simple solution to allow practitioners and researchers to more easily work with such data (visit the </span><span class="c24 c28 c38"><a class="c37" href="https://www.google.com/url?q=http://poloclub.gatech.edu/mmap/&amp;sa=D&amp;ust=1555470516152000">NSF-funded MMap project’s homepage</a></span><span class="c47 c40 c29 c21">&nbsp;to learn more about the research).</span></p><p class="c5"><span class="c47 c40 c29 c21"></span></p><p class="c8"><span class="c47 c40 c29 c21">The main idea is to place the dataset in your computer’s (unlimited) virtual memory, as it is often too big to fit in the RAM. When running algorithms on the dataset (e.g., PageRank), the operating system will automatically decide when to load the necessary data (subset of whole dataset) into RAM. </span></p><p class="c5"><span class="c47 c40 c29 c21"></span></p><p class="c8"><span class="c29">This technical approach to put data into your machine’s virtual memory space is called “memory mapping”, which allows the dataset to be treated as if it is an in-memory dataset. In your (PageRank) program, you do not need to know whether the data that you need is stored on the hard disk, or kept in RAM. &nbsp;Note that memory-mapping a file does NOT cause the whole file to be read into memory. Instead, data is loaded and kept in memory only when needed (determined by strategies like </span><span class="c24 c28 c38 c14"><a class="c37" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Page_replacement_algorithm%23Least_recently_used&amp;sa=D&amp;ust=1555470516152000">least recently used</a></span><span class="c29">&nbsp;paging and </span><span class="c24 c28 c38 c14"><a class="c37" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Page_replacement_algorithm%23Anticipatory_paging&amp;sa=D&amp;ust=1555470516152000">anticipatory</a></span><span class="c47 c40 c29 c21">&nbsp;paging).</span></p><p class="c5"><span class="c47 c40 c29 c21"></span></p><p class="c8"><span class="c29">You will use the Python modules </span><span class="c24 c6 c28 c4 c38"><a class="c37" href="https://www.google.com/url?q=https://docs.python.org/3/library/mmap.html&amp;sa=D&amp;ust=1555470516153000">mmap</a></span><span class="c29">&nbsp;and </span><span class="c24 c6 c28 c38"><a class="c37" href="https://www.google.com/url?q=https://docs.python.org/2/library/struct.html&amp;sa=D&amp;ust=1555470516153000">struct</a></span><span class="c29">&nbsp;to map a large graph dataset into your computer’s virtual memory. The </span><span class="c6 c29 c4">mmap</span><span class="c6">()</span><span>&nbsp;function does the “memory mapping”, establishing a mapping between a program’s (virtual) memory address space and a file stored on your hard drive -- we call this file a “memory-mapped” file</span><span class="c29">. Since memory-mapped files are viewed as a sequence of bytes (i.e., a binary file), your program needs to know how to convert bytes to and from numbers (e.g., integers). </span><span class="c6 c29">struct</span><span>&nbsp;supports such conversions via </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://pymotw.com/2/struct/&amp;sa=D&amp;ust=1555470516153000">“packing” and “unpacking”</a></span><span>, using format specifiers that represent the desired </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Endianness&amp;sa=D&amp;ust=1555470516154000">endianness</a></span><span class="c11">&nbsp;and data type to convert to/from.</span></p><h3 class="c9" id="h.1fob9te"><span class="c2">Q1.1 Set up Pypy </span></h3><p class="c5"><span class="c33 c21 c20"></span></p><p class="c8"><span>Install PyPy, </span><span class="c38">which is a Just-In-Time compilation runtime for Python, which supports fast packing and unpacking. C++ and Java are generally faster than Python. However, </span><span class="c24 c28 c38"><a class="c37" href="https://www.google.com/url?q=http://www.javaworld.com/article/2881907/scripting-jvm-languages/5-projects-that-push-python-performance.html&amp;sa=D&amp;ust=1555470516154000">several projects aim to boost Python speed</a></span><span class="c38">. PyPy is one of them. </span><span class="c38">We recommend that students use Python 3.6.x (or 3.7.x) for this question. Lower Python versions may be used (e.g., 2.7.x) if and only if you run into PyPy version incompatibility issues on your platform (e.g., Linux).</span></p><p class="c5"><span class="c11"></span></p><a id="t.c1aad38024fb40671727efb2391781a0a88ecc06"></a><a id="t.0"></a><table class="c53"><tbody><tr class="c91"><td class="c52" colspan="1" rowspan="1"><p class="c8"><span class="c32 c40">Ubuntu</span></p></td><td class="c57" colspan="1" rowspan="1"><p class="c8"><span class="c6 c32">sudo apt-get install pypy</span></p></td></tr><tr class="c30"><td class="c52" colspan="1" rowspan="1"><p class="c76"><span class="c46 c68">MacOS</span></p></td><td class="c57" colspan="1" rowspan="1"><p class="c13"><span class="c46">Install </span><span class="c18"><a class="c37" href="https://www.google.com/url?q=http://brew.sh/&amp;sa=D&amp;ust=1555470516156000">Homebrew</a></span><span class="c46">, then run </span><span class="c6 c46">brew install pypy3 <br></span><span class="c46">(For Python 2: </span><span class="c6 c46">brew install pypy</span><span class="c46">)</span></p></td></tr><tr class="c30"><td class="c52" colspan="1" rowspan="1"><p class="c8"><span class="c32 c40">Windows</span></p></td><td class="c57" colspan="1" rowspan="1"><p class="c8"><span class="c18"><a class="c37" href="https://www.google.com/url?q=http://pypy.org/download.html%23python2-7-compatible-pypy-5-4-1&amp;sa=D&amp;ust=1555470516157000">Download</a></span><span class="c32 c40">&nbsp;the package and then install it.</span></p></td></tr></tbody></table><p class="c5"><span class="c47 c40 c21 c22"></span></p><p class="c8"><span class="c11">Run the following code in the Q1 directory to learn more about the helper utility that we have provided to you for this question.</span></p><p class="c5"><span class="c47 c6 c54 c56"></span></p><a id="t.b6701864db09c80ecf7060ca80b3a1746634ed4e"></a><a id="t.1"></a><table class="c23"><tbody><tr class="c30"><td class="c58" colspan="1" rowspan="1"><p class="c8"><span class="c47 c6 c54 c56">$ pypy q1_utils.py --help</span></p></td></tr></tbody></table><h3 class="c9 c71" id="h.3znysh7"><span class="c2"></span></h3><h3 class="c9" id="h.u08m6b8o4q5v"><span class="c2">Q1.2 Warm Up (10 pts)</span></h3><p class="c5"><span class="c47 c6 c54 c56"></span></p><p class="c44 c43"><span>Get started with memory mapping concepts using the code-based tutorial in </span><span class="c6">warmup.py</span><span class="c11">.</span></p><p class="c44 c43"><span>You should study the code and modify parts of it as instructed in the file. You can run the tutorial code as-is (without any modifications) to test how it works (run “</span><span class="c6">python warmup.py</span><span class="c11">” on the terminal to do this). The warmup code is setup to pack the integers from 0 to 63 into a binary file, and unpack it back into a memory map object.</span></p><p class="c43 c25 c44"><span class="c11"></span></p><p class="c44 c43"><span class="c11">You will need to modify this code to pack the multiples of 5 in the range of 1 to 128 and their square root (in float format) &nbsp;into a binary file, and unpack it back into a memory map object. The lines that need to be updated are clearly marked. </span></p><p class="c44 c43 c25"><span class="c11"></span></p><p class="c31 c43"><span class="c0">Note: </span><span class="c22">You must not modify any other parts of the code. </span><span>When you are done, run warmup.py and then run the following command to test whether it works as expected</span><span class="c11">:</span></p><p class="c5"><span class="c47 c6 c54 c56"></span></p><a id="t.6fabc5fbefb4aae4eb718f61cffdf1812703bcc9"></a><a id="t.2"></a><table class="c23"><tbody><tr class="c30"><td class="c58" colspan="1" rowspan="1"><p class="c8"><span class="c47 c6 c54 c56">$ python q1_utils.py test_warmup out_warmup.bin</span></p></td></tr></tbody></table><p class="c5"><span class="c47 c6 c54 c56"></span></p><p class="c8"><span>It `s </span><span class="c6 c54 c56">True</span><span>&nbsp;if the binary file created after running </span><span class="c6 c54 c56">warmup.py</span><span class="c11">&nbsp;contains the expected output.</span></p><p class="c5"><span class="c11"></span></p><h3 class="c9" id="h.2et92p0"><span class="c2">Q1.3 Implementing and running PageRank (20 pts)</span></h3><p class="c5"><span class="c11"></span></p><p class="c8"><span>You will implement the PageRank algorithm, using the power iteration method, and run it on the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://snap.stanford.edu/data/soc-LiveJournal1.html&amp;sa=D&amp;ust=1555470516160000">LiveJournal dataset</a></span><span>&nbsp;(an online community with millions of users to maintain journals and blogs). We recommend you revisit the MMap lecture to refresh your memory about the PageRank algorithm and the data structures and files that you may need to memory-map. (For more details, read the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://www.cc.gatech.edu/~dchau/papers/14-bigdata-mmap.pdf&amp;sa=D&amp;ust=1555470516160000">MMap</a></span><span class="c11">&nbsp;paper.) You will perform three steps (subtasks) as described below.</span></p><h4 class="c41" id="h.tyjcwt"><span class="c20">Step 1: Download the </span><span class="c24 c20 c28"><a class="c37" href="https://www.google.com/url?q=https://www.dropbox.com/s/qma5mrok9r3vrad/soc-LiveJournal1.txt.gz?dl%3D0&amp;sa=D&amp;ust=1555470516160000">LiveJournal graph </a></span><span class="c24 c28 c20"><a class="c37" href="https://www.google.com/url?q=https://www.dropbox.com/s/qma5mrok9r3vrad/soc-LiveJournal1.txt.gz?dl%3D0&amp;sa=D&amp;ust=1555470516161000">dataset</a></span><span class="c36 c4 c20">&nbsp;(an edge list file)</span></h4><p class="c8"><span>The LiveJournal graph contains almost 70 million edges. It is available on the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://snap.stanford.edu/data/soc-LiveJournal1.html&amp;sa=D&amp;ust=1555470516161000">SNAP website</a></span><span class="c11">. We are hosting the graph, to avoid high traffic bombarding their site. </span></p><h4 class="c41" id="h.3dy6vkm"><span class="c20">Step 2: Convert the </span><span class="c20">graph’s</span><span class="c20">&nbsp;edge list to binary files (you only</span><span class="c38 c20">&nbsp;need to do this once)</span></h4><p class="c8"><span>Since memory mapping works with binary files, you will convert the </span><span>graph’s</span><span class="c11">&nbsp;edge list into its binary format by running the following command at the terminal/command prompt:</span></p><p class="c5"><span class="c11"></span></p><a id="t.c74ef5819320bed09c1ea2530f199706323d867b"></a><a id="t.3"></a><table class="c23"><tbody><tr class="c30"><td class="c58" colspan="1" rowspan="1"><p class="c8"><span class="c6">$ python q1_utils.py convert &lt;path-to-edgelist.txt&gt;</span></p></td></tr></tbody></table><p class="c5"><span class="c11"></span></p><p class="c8"><span>Example: &nbsp;Consider the following </span><span class="c6">toy-graph.txt</span><span class="c11">, which contains 7 edges:</span></p><p class="c5"><span class="c11"></span></p><p class="c8"><span class="c15 c6">0 1</span></p><p class="c8"><span class="c15 c6">1 0</span></p><p class="c8"><span class="c15 c6">1 2</span></p><p class="c8"><span class="c15 c6">2 1</span></p><p class="c8"><span class="c15 c6">3 4</span></p><p class="c8"><span class="c15 c6">4 5</span></p><p class="c8"><span class="c6">5 2</span></p><p class="c5"><span class="c11"></span></p><p class="c8"><span class="c11">To convert the graph to its binary format, you will type:</span></p><p class="c5"><span class="c15 c6"></span></p><p class="c8"><span class="c15 c6">$ python q1_utils.py convert toy-graph/toy-graph.txt</span></p><p class="c5"><span class="c15 c6"></span></p><p class="c8"><span class="c11">This generates 3 files:</span></p><p class="c5"><span class="c11"></span></p><p class="c8"><span class="c15 c6">toy-graph/</span></p><p class="c5"><span class="c15 c6"></span></p><p class="c8 c39"><span class="c6">toy-graph.bin: </span><span class="c11">binary file containing edges (source, target) in big-endian “int” C type</span></p><p class="c8 c39"><span class="c6">toy-graph.idx: </span><span class="c11">binary file containing (node, degree) in little-endian “int” C type</span></p><p class="c8 c39"><span class="c6">toy-graph.json: </span><span>metadata about the conversion process (</span><span class="c22">required to run pagerank</span><span>)</span></p><p class="c5"><span class="c11"></span></p><p class="c42"><span>In </span><span class="c6">toy-graph.bin</span><span class="c11">&nbsp;we have,</span></p><p class="c25 c42"><span class="c11"></span></p><p class="c42"><span class="c6">0000 0000 0000 0001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 0 1 </span><span>(in big-endian “int” C type)</span></p><p class="c42"><span class="c15 c6">0000 0001 0000 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 1 0</span></p><p class="c42"><span class="c15 c6">0000 0001 0000 0002 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 1 2</span></p><p class="c42"><span class="c15 c6">0000 0002 0000 0001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 2 1</span></p><p class="c42"><span class="c15 c6">0000 0003 0000 0004 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 3 4</span></p><p class="c42"><span class="c15 c6">0000 0004 0000 0005&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 4 5</span></p><p class="c42"><span class="c15 c6">0000 0005 0000 0002 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 5 2</span></p><p class="c42"><span class="c15 c6">ffff ffff ffff ffff</span></p><p class="c42"><span class="c15 c6">...</span></p><p class="c42"><span class="c15 c6">ffff ffff </span></p><p class="c42"><span class="c11">&nbsp;</span></p><p class="c42"><span>In </span><span class="c6">toy-graph.idx</span><span class="c11">&nbsp;we have,</span></p><p class="c42 c25"><span class="c11"></span></p><p class="c42"><span class="c6">0000 0000 0100 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 0 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>(in little-endian “int” C type )</span></p><p class="c42"><span class="c15 c6">0100 0000 0200 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 1 2</span></p><p class="c42"><span class="c15 c6">0200 0000 0100 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 2 1</span></p><p class="c42"><span class="c15 c6">0300 0000 0100 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 3 1</span></p><p class="c42"><span class="c15 c6">0400 0000 0100 0000 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 4 1</span></p><p class="c42"><span class="c15 c6">0500 0000 0100 0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 5 1</span></p><p class="c42"><span class="c15 c6">...</span></p><p class="c42"><span class="c15 c6">ffff ffff ffff ffff</span></p><p class="c5"><span class="c11"></span></p><p class="c8"><span class="c0">Note:</span><span class="c22">&nbsp;there are extra values of -1 (</span><span class="c6 c22">ffff ffff</span><span class="c47 c40 c21 c22">) added at the end of the binary file as padding to ensure that the code will not break in case you try to read a value greater than the file size. You can ignore these values as they will not affect your code.</span></p><h4 class="c41" id="h.1t3h5sf"><span class="c21 c20">S</span><span class="c36 c4 c20">tep 3: Implement and run the PageRank algorithm on LiveJournal graph’s binary files</span></h4><p class="c5"><span class="c11"></span></p><p class="c8"><span>Follow the instructions in </span><span class="c6">pagerank.py </span><span>to implement the PageRank algorithm.</span></p><p class="c8"><span class="c47 c21 c38 c59 c20 c48">You will only need to write/modify a few lines of code. </span></p><p class="c5"><span class="c47 c21 c38 c20 c48 c59"></span></p><p class="c8"><span class="c11 c38">Next, run the following command to execute your PageRank implementation:</span></p><p class="c8"><span class="c11 c38">&nbsp;</span></p><a id="t.9af0cd8cfb8fb2811e15113bb68f5bbc2d02615f"></a><a id="t.4"></a><table class="c23"><tbody><tr class="c30"><td class="c58" colspan="1" rowspan="1"><p class="c8"><span class="c6 c38">$ pypy </span><span class="c6">q1_utils</span><span class="c6 c38">.py pagerank &lt;path to JSON file for LiveJournal&gt;</span></p></td></tr></tbody></table><p class="c5"><span class="c11 c38"></span></p><p class="c8"><span class="c11 c38">This will output the 10 nodes with the highest PageRank scores.</span></p><p class="c5"><span class="c11 c38"></span></p><p class="c8"><span class="c38">For example: </span><span class="c6 c38">$ pypy </span><span class="c6">q1_utils</span><span class="c6 c38">.py pagerank </span><span class="c15 c6">toy-graph/toy-graph.json</span></p><p class="c5"><span class="c15 c6"></span></p><p class="c8"><span class="c15 c6">node_id score</span></p><p class="c8"><span class="c15 c6">1 &nbsp; &nbsp; &nbsp; 0.4106875</span></p><p class="c8"><span class="c15 c6">2 &nbsp; &nbsp; &nbsp; 0.2542078125</span></p><p class="c8"><span class="c15 c6">0 &nbsp; &nbsp; &nbsp; 0.1995421875</span></p><p class="c8"><span class="c15 c6">5 &nbsp; &nbsp; &nbsp; 0.0643125</span></p><p class="c8"><span class="c15 c6">4 &nbsp; &nbsp; &nbsp; 0.04625</span></p><p class="c8"><span class="c15 c6">3 &nbsp; &nbsp; &nbsp; 0.025</span></p><p class="c5"><span class="c15 c6"></span></p><p class="c8"><span class="c47 c40 c29 c21">(Note that only 6 nodes are printed here since the toy graph only has 6 nodes.)</span></p><h4 class="c41" id="h.4d34og8"><span class="c20 c21">S</span><span class="c36 c4 c20">tep 4: Experiment with different number of iterations. </span></h4><p class="c5"><span class="c47 c29 c4 c20 c48"></span></p><p class="c8"><span class="c29">Find the output for the top 10 nodes for the LiveJournal graph</span><span class="c20">&nbsp;</span><span>for n=10, 25, 50 iterations (try the </span><span class="c6">--iterations n </span><span>argument in the command above; the default number of iterations is 10). A file in the format </span><span class="c20">pagerank_nodes_n.txt </span><span class="c11">&nbsp;for “n” number of iterations will be created. For example: </span></p><p class="c5"><span class="c11"></span></p><a id="t.5023164a411512131af5b99878627a098e5539b1"></a><a id="t.5"></a><table class="c23"><tbody><tr class="c30"><td class="c58" colspan="1" rowspan="1"><p class="c8"><span class="c6 c38">$ pypy </span><span class="c6">q1_utils</span><span class="c6 c38">.py pagerank </span><span class="c6">toy-graph/toy-graph.json --iterations 25</span></p></td></tr></tbody></table><p class="c5"><span class="c11"></span></p><p class="c8"><span class="c11">You may notice that while the top nodes’ ordering starts to stabilize as you run more iterations, the nodes’ PageRank scores may still change. The speed at which the PageRank scores converge depends on the PageRank vector’s initial values. The closer the initial values are to the actual pagerank scores, the faster they converge.</span></p><h3 class="c72" id="h.2s8eyo1"><span class="c4 c20">Deliverables</span></h3><p class="c5"><span class="c11"></span></p><ol class="c3 lst-kix_list_4-0 start" start="1"><li class="c8 c19"><span class="c20">warmup.py [6pt]</span><span class="c11">: your modified implementation.</span></li><li class="c8 c19"><span class="c20">out_warmup.bin [3pt]</span><span class="c11">: the binary file, automatically generated by your modified warmup.py.</span></li><li class="c8 c19"><span class="c20">out_warmup_bytes.txt [1pt]</span><span class="c11">: the text file with the number of bytes, automatically generated by your modified warmup.py.</span></li><li class="c8 c19"><span class="c20">pagerank.py</span><span>&nbsp;</span><span class="c20">[14pt]</span><span class="c11">: your modified implementation.</span></li><li class="c8 c19"><span class="c20">pagerank_nodes_n.txt [6pt]</span><span class="c11">: the 3 files (as given below) containing the top 10 node IDs and their pageranks for n iterations, automatically generated by q1_utils.py.</span></li></ol><ul class="c3 lst-kix_list_4-1 start"><li class="c8 c66"><span class="c20">pagerank_nodes_10.txt [2pt] &nbsp;</span><span class="c11">for n=10</span></li><li class="c8 c66"><span class="c20">pagerank_nodes_25.txt [2pt] &nbsp;</span><span class="c11">for n=25</span></li><li class="c8 c66"><span class="c20">pagerank_nodes_50.txt [2pt] &nbsp;</span><span class="c11">for n=50</span></li></ul><p class="c5"><span class="c11"></span></p><p class="c5"><span class="c11"></span></p><h2 class="c43 c70 c75" id="h.17dp8vu"><span>Q2 [50 pts] </span><span>Random Forest Classifier</span></h2><p class="c17 c25"><span class="c47 c0 c4 c48"></span></p><p class="c17"><span class="c0 c4">Note: You must use </span><span class="c0 c4">Python 3.x </span><span class="c0 c4">for this question.</span></p><p class="c31 c43 c25"><span class="c11"></span></p><p class="c31 c43"><span>You will implement a random forest classifier in Python. The performance of the classifier will be evaluated </span><span class="c38">via the out-of-bag (OOB) error estimate,</span><span class="c11">&nbsp;using the provided dataset.</span></p><p class="c31 c43"><span class="c0">Note:</span><span>&nbsp;</span><span class="c22">You </span><span class="c0">must not</span><span class="c40 c21 c22 c47">&nbsp;use existing machine learning or random forest libraries like scikit-learn. </span></p><p class="c31 c43 c25"><span class="c47 c40 c21 c22"></span></p><p class="c31 c43"><span>The dataset you will use is extracted from the </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://archive.ics.uci.edu/ml/datasets/QSAR%2Bbiodegradation&amp;sa=D&amp;ust=1555470516171000">QSAR biodegradation Data Set</a></span><span>&nbsp;where each record consists of the parameters of the chemical structure of various chemicals. The dataset has been cleaned to remove missing attributes. The data is stored in a comma-separated file (csv) in your Q2 folder as </span><span class="c20">hw4-data.csv</span><span class="c11">. Each line describes an instance using 42 columns: the first 41 columns represent the attributes of the molecule, and the last column is the ground ­truth label which tells us if the molecule is biodegradable or not (1 means biodegradable, 0 means not biodegradable).</span></p><p class="c31 c43"><span class="c0">Note:</span><span class="c22">&nbsp;The last column </span><span class="c0">should not</span><span class="c22">&nbsp;be treated as an attribute.</span></p><p class="c31 c43 c25"><span class="c11"></span></p><p class="c31 c43"><span>You will perform binary classification on the dataset to determine if a molecule is biodegradable or not.</span></p><h3 class="c63" id="h.3rdcrjn"><span class="c67 c4 c20">Essential Reading</span></h3><h5 class="c27" id="h.26in1rg"><span class="c10">Decision Trees</span></h5><p class="c31 c43"><span>To complete this question, you need to develop a good understanding of how decision trees work. We recommend you review the lecture on decision tree. Specifically, you need to know how to construct decision trees using </span><span class="c14">Entropy </span><span>and</span><span class="c14">&nbsp;Information Gain</span><span>&nbsp;to select the splitting attribute and split point for the selected attribute. These </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15381-s06/www/DTs.pdf&amp;sa=D&amp;ust=1555470516173000">slides from CMU</a></span><span>&nbsp;(also mentioned in lecture) provide an excellent example of how to construct a decision tree using </span><span class="c14">Entropy</span><span>&nbsp;and </span><span class="c14">Information Gain</span><span class="c11">. </span></p><h5 class="c27" id="h.lnxbz9"><span class="c10">Random Forests</span></h5><p class="c31 c43"><span>To refresh your memory about random forests, &nbsp;see Chapter 15 in the “</span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://web.stanford.edu/~hastie/Papers/ESLII.pdf&amp;sa=D&amp;ust=1555470516173000">Elements of Statistical Learning</a></span><span>” book and the </span><span>lecture on random forests.</span><span>&nbsp;Here is a </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://blog.echen.me/2011/03/14/laymans-introduction-to-random-forests/&amp;sa=D&amp;ust=1555470516173000">blog post</a></span><span class="c11">&nbsp;that introduces random forests in a fun way, in layman’s terms.</span></p><h5 class="c27" id="h.35nkun2"><span>Out-of-Bag Error Estimate</span></h5><h5 class="c31 c43 c70" id="h.1ksv4uv"><span class="c38 c69">In random forests, it is not necessary to perform explicit cross-validation or use a separate test set for performance evaluation. Out-of-bag (OOB)</span><span class="c69">&nbsp;error estimate has shown to be reasonably accurate and unbiased. Below, we summarize the key points about OOB described in the</span><span>&nbsp;</span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm%23ooberr&amp;sa=D&amp;ust=1555470516174000">original article by Breiman and Cutler</a></span><span>.</span></h5><p class="c31 c25"><span class="c47 c40 c54 c21 c38"></span></p><p class="c31"><span class="c38">Each tree in the forest is constructed using a different bootstrap sample from the original data. Each bootstrap sample is constructed by randomly sampling from the original dataset </span><span class="c38 c20">with replacement </span><span class="c38">(usually, a bootstrap sample has the</span><span class="c38 c54">&nbsp;</span><span class="c24 c28 c38"><a class="c37" href="https://www.google.com/url?q=http://stats.stackexchange.com/questions/24330/is-there-a-formula-or-rule-for-determining-the-correct-sampsize-for-a-randomfore&amp;sa=D&amp;ust=1555470516174000">same size</a></span><span class="c54 c38">&nbsp;</span><span class="c38">as the original dataset). Statistically, about one-third of the cases are left out of the bootstrap sample and not used in the construction of the </span><span class="c38 c14">kth</span><span class="c38">&nbsp;tree. For each record left out in the construction of the </span><span class="c38 c14">kth</span><span class="c38">&nbsp;tree, it can be assigned a class by the </span><span class="c38 c14">kth</span><span class="c11 c38">&nbsp;tree. As a result, each record will have a “test set” classification by the subset of trees that treat the record as an out-of-bag sample. The majority vote for that record will be its predicted class. The proportion of times that a predicted class is not equal to the true class of a record averaged over all records is the OOB error estimate.</span></p><p class="c31 c43 c25"><span class="c11"></span></p><p class="c31 c43"><span class="c67 c4 c20">Starter Code</span></p><p class="c31"><span class="c11">We have prepared starter code written in Python for you to use. This would help you load the data and evaluate your model. The following files are provided for you:</span></p><ul class="c3 lst-kix_list_8-0 start"><li class="c31 c43 c19"><span class="c6">util.py</span><span class="c11">: utility functions that will help you build a decision tree</span></li><li class="c31 c43 c19"><span class="c6">decision_tree.py</span><span class="c11">: a decision tree class that you will use to build your random forest</span></li><li class="c31 c43 c19"><span class="c6">random_forest.py</span><span class="c11">: a random forest class and a main method to test your random forest</span></li></ul><h3 class="c63" id="h.44sinio"><span class="c4 c20 c36">What you will implement</span></h3><p class="c31 c43"><span>Below, we have summarized what you will implement to solve this question. Note that you MUST use </span><span class="c20">information gain</span><span class="c11">&nbsp;to perform the splitting in the decision tree. The starter code has detailed comments on how to implement each function. </span></p><ol class="c3 lst-kix_list_9-0 start" start="1"><li class="c31 c43 c19"><span class="c6">util.py</span><span class="c11">: implement the functions to compute entropy, information gain, and perform splitting.</span></li><li class="c31 c43 c19"><span class="c6">decision_tree.py</span><span>: implement the </span><span class="c6">learn()</span><span class="c11">&nbsp;method to build your decision tree using the utility functions above. </span></li><li class="c31 c43 c19"><span class="c6">decision_tree.py</span><span>: implement the </span><span class="c6">classify()</span><span class="c14">&nbsp;</span><span class="c11">method to predict the label of a test record using your decision tree.</span></li><li class="c31 c43 c19"><span class="c6">random_forest.py</span><span>: implement the functions </span><span class="c6">_bootstrapping()</span><span>, </span><span class="c6">fitting()</span><span>, </span><span class="c6">voting()</span></li></ol><p class="c31 c43"><span class="c0">Note</span><span class="c22">:</span><span>&nbsp;</span><span class="c22">You must achieve a minimum accuracy of 75% for x`the random forest.</span></p><p class="c31 c43 c25"><span class="c47 c56 c38 c80 c20 c79"></span></p><p class="c31 c43"><span class="c56 c38 c20 c79 c80">Note 2</span><span class="c38 c51">: Remember to remove all print statements from the code. Nothing should be printed on the console. Failure to do so may result in point deduction.</span></p><p class="c31 c43 c25"><span class="c11"></span></p><p class="c31 c43"><span class="c11">As you solve this question, you will need to think about multiple parameters in your design, some may be more straightforward to determine, some may be not (hint: study lecture slides and essential reading above). For example:</span></p><ul class="c3 lst-kix_list_1-0 start"><li class="c8 c19"><span class="c11">Which attributes to use when building a tree?</span></li><li class="c8 c19"><span class="c11">How to determine the split point for an attribute?</span></li><li class="c8 c19"><span class="c11">When do you stop splitting leaf nodes? </span></li><li class="c8 c19"><span class="c11">How many trees should the forest contain?</span></li></ul><p class="c31 c25"><span class="c11"></span></p><p class="c31"><span>Note that, as mentioned in lecture, there are other approaches to implement random forests. For example, instead of information gain, other popular choices include Gini index, random attribute selection (e.g., </span><span class="c24 c28"><a class="c37" href="https://www.google.com/url?q=http://citeseerx.ist.psu.edu/viewdoc/download?doi%3D10.1.1.232.2940%26rep%3Drep1%26type%3Dpdf&amp;sa=D&amp;ust=1555470516177000">PERT - Perfect Random Tree Ensembles</a></span><span class="c11">). We decided to ask everyone to use an information gain based approach in this question (instead of leaving it open-ended), to help standardize students’ solutions to help accelerate our grading efforts.</span></p><p class="c31 c25"><span class="c11"></span></p><p class="c31 c25"><span class="c36 c4 c20"></span></p><p class="c31"><span class="c4 c20 c67">Deliverables</span></p><ol class="c3 lst-kix_list_10-0 start" start="1"><li class="c31 c19"><span class="c20">hw4-data.csv</span><span class="c11">: The dataset used to develop your program. Do not modify this file.</span></li><li class="c31 c19"><span class="c20">util.py [10 pts]</span><span class="c11">: The source code of your utility functions. </span></li><li class="c31 c19"><span class="c20">decision_tree.py </span><span class="c20">[</span><span class="c20">30</span><span class="c20">&nbsp;pts</span><span class="c20">]</span><span class="c11">: The source code of your decision tree implementation.</span></li><li class="c31 c19"><span class="c20">random_forest.py </span><span class="c20">[</span><span class="c20">10</span><span class="c20">&nbsp;pts</span><span class="c20">]</span><span class="c11">: The source code of your random forest implementation with appropriate comments.</span></li></ol><p class="c25 c31"><span class="c11"></span></p><h2 class="c75 c43 c70" id="h.2jxsxqh"><span>Q3 </span><span>[30 points]</span><span>&nbsp;</span><span>Using Scikit-Learn</span></h2><p class="c43 c86"><span class="c0 c4">Note: You must use </span><span class="c0 c4">Python 3.7</span><span class="c0 c4">.</span><span class="c0 c4">x </span><span class="c0 c4">for this question.</span></p><p class="c8"><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org&amp;sa=D&amp;ust=1555470516179000">Scikit-learn</a></span><span class="c4">&nbsp;is a popular Python library for machine learning. You will use it to train some classifiers on the </span><span class="c4">EEG Eye State</span><sup class="c4 c64"><a href="https://docs.google.com/document/d/e/2PACX-1vT8QgiqTMxDOle5EHnZfoUSRBFAKJ7QPfMibO0h6Jr5NID7e5aBIO3-cCRcEgtcxlGeFRoXZ3sAXGnr/pub#ftnt1" id="ftnt_ref1">[1]</a></sup><span class="c4">&nbsp;dataset in the folder, called eeg_dataset.txt.</span></p><h3 class="c9" id="h.z337ya"><span>Q3.1 - Classifier Setup </span><span>[5 pts]</span></h3><p class="c8"><span class="c12 c4">Train each of the following classifiers on the dataset, using the classes provided in the links below. You will do hyperparameter tuning in Q3.2 to get the best accuracy for each classifier on the dataset.</span></p><ol class="c3 lst-kix_list_11-0 start" start="1"><li class="c8 c19"><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html%23sklearn.linear_model.LinearRegression&amp;sa=D&amp;ust=1555470516180000">Linear Regression</a></span></li><li class="c8 c19"><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html&amp;sa=D&amp;ust=1555470516180000">Random Forest</a></span></li><li class="c8 c19"><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html%23sklearn.svm.SVC&amp;sa=D&amp;ust=1555470516180000">Support Vector Machine</a></span><span class="c12 c4">&nbsp;(The link points to SVC, which is a particular implementation of SVM by scikit.)</span></li><li class="c8 c19"><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html&amp;sa=D&amp;ust=1555470516181000">Principal Component Analysis</a></span></li></ol><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c12 c4">Scikit has additional documentation on each of these classes, explaining them in more detail, such as how they work and how to use them.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">Use the skeleton file called</span><span class="c4 c14">&nbsp;hw4q3.py </span><span class="c12 c4">to write your code.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">In </span><span class="c4 c14">report.</span><span class="c4 c14">txt</span><span class="c4">,</span><span class="c4">&nbsp;under the relevant section, follow the skeleton and put your training and testing accuracies for each classifier.</span><span class="c4">&nbsp;</span><span class="c0 c4">Report your accuracies with two decimal places in the range of [0.00, 1.00</span><span class="c0 c4">]</span><span class="c4">, e.g. 0.78 and not 78, 78.00, 78%, etc. This should be easy since sklearn itself will give values in a decimal format less than 1.00.</span></p><p class="c17 c25"><span class="c11"></span></p><p class="c8"><span class="c12 c4">As a reminder, the general flow of your machine learning code will look like:</span></p><ol class="c3 lst-kix_list_12-0 start" start="1"><li class="c8 c19"><span class="c12 c4">Load dataset</span></li><li class="c8 c19"><span class="c4">Preprocess (you will do this in Q3.2)</span></li><li class="c8 c19"><span class="c4">Split the data into </span><span class="c6 c4">x_train</span><span class="c4">, </span><span class="c6 c4">y_train</span><span class="c4">, </span><span class="c6 c4">x_test</span><span class="c4">, </span><span class="c6 c4">y_test</span><span class="c12 c4">&nbsp;</span></li><li class="c8 c19"><span class="c4">Train the classifier on </span><span class="c6 c4">x_train</span><span class="c4">&nbsp;and </span><span class="c6 c4">y_train</span></li><li class="c8 c19"><span class="c4">Predict on </span><span class="c6 c4">x_test</span></li><li class="c8 c19"><span class="c12 c4">Evaluate testing accuracy by comparing the predictions from step 5 with y_test.</span></li></ol><p class="c8"><span class="c4">Here is an </span><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html%23sphx-glr-auto-examples-linear-model-plot-ols-py&amp;sa=D&amp;ust=1555470516182000">example</a></span><span class="c12 c4">. Scikit has many other examples as well that you can learn from.</span></p><h3 class="c9" id="h.3j2qqm3"><span>Q3.2 - Hyperparameter Tuning </span><span>[15 pts] </span></h3><p class="c8"><span class="c4">Tune your Random Forest and SVM to obtain their best accuracies on the dataset. For Random Forest, tune the model on the unmodified test and train datasets. For SVM, either </span><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html&amp;sa=D&amp;ust=1555470516183000">standardize</a></span><span class="c4">&nbsp;or </span><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.normalize.html&amp;sa=D&amp;ust=1555470516183000">normalize</a></span><span class="c12 c4">&nbsp;the dataset before using it to tune the model.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c47 c0 c4 c48">Note: </span></p><p class="c8"><span class="c4">If you are using StandardScaler:</span></p><ul class="c3 lst-kix_list_5-0 start"><li class="c8 c19"><span class="c4">Pass </span><span class="c6 c4">x_train</span><span class="c4">&nbsp;into the fit method. Then transform both </span><span class="c6 c4">x_train</span><span class="c4">&nbsp;and </span><span class="c6 c4">x_test</span><span class="c12 c4">&nbsp;to obtain the standardized versions of both. </span></li><li class="c8 c19"><span class="c4">The reason we fit only on </span><span class="c6 c4">x_train</span><span class="c12 c4">&nbsp;and not the entire dataset is because we do not want to train on data that was affected by the testing set.</span></li></ul><p class="c5 c45"><span class="c12 c4"></span></p><p class="c8"><span class="c4">Tune the hyperparameters specified below, using the </span><span class="c24 c28 c4"><a class="c37" href="https://www.google.com/url?q=http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html&amp;sa=D&amp;ust=1555470516184000">GridSearchCV</a></span><span class="c12 c4">&nbsp;function that Scikit provides: </span></p><p class="c5"><span class="c12 c4"></span></p><ul class="c3 lst-kix_list_6-0 start"><li class="c8 c19"><span class="c12 c4">For random forest, tune the parameters “n_estimators” and “max_depth”.</span></li><li class="c8 c19"><span class="c12 c4">For SVM, tune “C” and “kernel” (try only ‘linear’ and ‘rbf’).</span></li></ul><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">Use </span><span class="c4 c20">10 folds</span><span class="c4">&nbsp;by setting the </span><span class="c4 c14">cv</span><span class="c4">&nbsp;parameter to 10.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c12 c4">You should test at least 3 values for each of the numerical parameters. For C, the values should be different by factors of at least 10, for example, 0.001, 0.01, and 0.1, or 0.0001, 0.1 and 100.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">In the relevant section of </span><span class="c4 c14">report.</span><span class="c4 c14">txt</span><span class="c12 c4">, state the values you tested for each hyperparameter.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">Also follow the skeleton in </span><span class="c4 c14">report.</span><span class="c4 c14">txt</span><span class="c4">&nbsp;to report the best combination of hyperparameter values for each classifier tuned, its testing accuracy from Q3.1, and its best testing accuracy from tuning. For each classifier the best testing accuracy from tuning should be at least as high as the testing accuracy from Q3.1. </span><span class="c0 c4">Report your accuracies with two decimal places in the range of [0.00, 1.00]</span><span class="c4">, e.g. 0.78 and not 78, 78.00, 78%, etc.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c43 c92"><span class="c0 c4">Note: </span><span class="c12 c4">If GridSearchCV is taking a long time to run for SVM, make sure you are standardizing or normalizing your data beforehand. </span></p><h3 class="c9" id="h.1y810tw"><span class="c2">Q3.3 - Cross-Validation Results [2 pts] </span></h3><p class="c8"><span class="c4">Let’s practice getting the results of cross-validation. For your SVM (only), report the </span><span class="c4 c14">mean training score, mean testing score </span><span class="c4">and </span><span class="c4 c14">mean fit time</span><span class="c12 c4">&nbsp;for the best combination of hyperparameter values that you obtained in Q3.2. The GridSearchCV class holds a &nbsp;‘cv_results_’ dictionary that should help you report these metrics easily.</span></p><p class="c5"><span class="c12 c4"></span></p><p class="c8"><span class="c4">Report the metrics in </span><span class="c4 c14">report.</span><span class="c4 c14">txt</span><span class="c4">&nbsp;under the relevant section. </span><span class="c0 c4">Report your accuracies with two decimal places in the range of [0.00, 1.00]</span><span class="c4">, e.g. 0.78 and not 78, 78.00, 78%, etc.</span></p><p class="c5"><span class="c12 c4"></span></p><h3 class="c9" id="h.d3c833okjrvh"><span class="c2">Q3.4 - Evaluate relative importance of features [2 pts]</span></h3><p class="c43 c62"><span class="c12 c4">You have performed a simple classification task using the Random Forest algorithm. You have also implemented the algorithm in Q2 above. The concept of entropy gain can also be used to evaluate the importance of a feature. </span></p><p class="c31 c43"><span class="c12 c4">In this section you will determine the feature importance as evaluated by the Random Forest Classifier. You must then sort them in the descending order and print the feature numbers. Hint: There is a direct function available in sklearn to achieve this. Also checkout argsort() function in Python numpy. (argsort() returns the indices of the elements in ascending order)</span></p><p class="c31 c43"><span class="c4">You should use the first classifier that you trained initially in </span><span class="c4 c20">Q3.1</span><span class="c12 c4">, without any kind of hyperparameter-tuning, for reporting these features.</span></p><p class="c31 c43"><span class="c4">Report the most important and the least important features in the relevant section of </span><span class="c4 c14">report.txt</span><span class="c4">.</span><span class="c4">&nbsp;</span><span class="c4 c22">Mention the features with the exact name, e.g. X11, X1, etc. and not any index or value.</span></p><h3 class="c9" id="h.4i7ojhp"><span class="c2">Q3.5 - Best Classifier [4 pts]</span></h3><p class="c8"><span class="c4">Out of all 3</span><span class="c4">&nbsp;</span><span class="c4">classifie</span><span class="c4">rs</span><span class="c4">&nbsp;(for Random Forest and SVM take the best one from GridSearchCV for each), assess which one performed the best. Use testing accuracies, fit time or a combination of both in your reasoning. Put your explanation in </span><span class="c4 c14">report.</span><span class="c4 c14">txt</span><span class="c12 c4">&nbsp;under the relevant section, using at most 50 words.</span></p><p class="c5"><span class="c12 c4"></span></p><h3 class="c9" id="h.lf0x57uamzbn"><span class="c2">Q3.6 - Principal Component Analysis [2 pts]</span></h3><p class="c31 c43"><span class="c4">Dimensionality reduction is an important task in many data analysis exercises and it involves projecting the data to a lower dimensional space using </span><span class="c4 c38">Singular Value Decomposition. Refer to the examples given </span><span class="c24 c28 c4 c38"><a class="c37" href="https://www.google.com/url?q=https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html&amp;sa=D&amp;ust=1555470516188000">here</a></span><span class="c4">, set parameters </span><span class="c4 c14">n_component</span><span class="c4">&nbsp;to 10 and </span><span class="c4 c14">svd_solver</span><span class="c4">&nbsp;to 'full' (keep other parameters at their default value), and report the following in the relevant section of </span><span class="c4 c14">report.txt</span><span class="c12 c4">:</span></p><ol class="c3 lst-kix_atpom7tmdc5x-0 start" start="1"><li class="c31 c43 c19"><span class="c4 c20 c24">Percentage</span><span class="c12 c4">&nbsp;of variance explained by each of the selected components.</span></li><li class="c31 c43 c19"><span class="c12 c4">The singular values corresponding to each of the selected components.</span></li></ol><p class="c31 c43"><span class="c4">You can copy your printed output arrays directly into the relevant section of the report.txt but </span><span class="c0 c4">you must add commas after each value</span><span class="c4">&nbsp;so we can distinguish between individual values.</span></p><p class="c31 c43 c25"><span class="c12 c4"></span></p><h3 class="c55" id="h.2xcytpi"><span>Deliverables</span></h3><ul class="c3 lst-kix_list_7-0 start"><li class="c17 c19"><span class="c20">r</span><span class="c20">eport.txt </span><span>- A txt file containing your results for all parts.</span></li></ul><ul class="c3 lst-kix_list_2-0 start"><li class="c8 c19"><span class="c20">hw4q3.py </span><span class="c11">- Skeleton file filled with your code from Q3.1-Q3.6.</span></li><li class="c8 c19"><span class="c20">eeg_dataset.csv</span><span class="c20">&nbsp;</span><span class="c11">- the original dataset.</span></li></ul><hr style="page-break-before:always;display:none;"><h2 class="c82" id="h.1ci93xb"><span class="c33 c26 c20"></span></h2><h2 class="c84" id="h.3whwml4"><span class="c26 c20">Submission Guidelines</span></h2><p class="c17"><span>Submit the deliverables as a single </span><span class="c24 c20">zip</span><span>&nbsp;file named </span><span class="c46 c20">HW4-GTusername.zip</span><span class="c11">. Write down the name(s) of any students you have collaborated with on this assignment, using the text box on the Canvas submission page.</span></p><p class="c17 c25"><span class="c11"></span></p><p class="c17"><span class="c11">The zip file’s directory structure must exactly be (when unzipped):</span></p><p class="c17 c25"><span class="c11"></span></p><p class="c17"><span class="c6">HW4-</span><span class="c6 c46">GTusername</span><span class="c6">/</span></p><p class="c17 c39"><span class="c15 c6">Q1/</span></p><p class="c17 c39 c45"><span class="c15 c6">warmup.py</span></p><p class="c17 c39 c45"><span class="c15 c6">out_warmup.bin</span></p><p class="c17 c39 c45"><span class="c15 c6">out_warmup_bytes.txt</span></p><p class="c17 c39 c45"><span class="c15 c6">pagerank.py</span></p><p class="c17 c39 c45"><span class="c6 c15">pagerank_nodes_10.txt</span></p><p class="c17 c39 c45"><span class="c15 c6">pagerank_nodes_25.txt</span></p><p class="c17 c39 c45"><span class="c15 c6">pagerank_nodes_50.txt</span></p><p class="c17 c25 c39"><span class="c15 c6"></span></p><p class="c17 c39"><span class="c6">Q2/</span></p><p class="c17 c39 c45"><span class="c6">hw4-data.csv</span></p><p class="c17 c39 c45"><span class="c15 c6">util.py</span></p><p class="c17 c39 c45"><span class="c15 c6">decision_tree.py</span></p><p class="c17 c39 c45"><span class="c6">random_forest.py</span></p><p class="c17 c25 c39 c45"><span class="c15 c6"></span></p><p class="c17 c39"><span class="c6">Q3/</span></p><p class="c17 c39"><span class="c6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c6">report.</span><span class="c15 c6">txt</span></p><p class="c17 c39"><span class="c15 c6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hw4q3.py</span></p><p class="c17 c39"><span class="c6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c6">eeg</span><span class="c6">_dataset.csv</span></p><p class="c17 c25 c39"><span class="c11"></span></p><p class="c17"><span>You must follow the naming convention specified above.</span></p><div><p class="c43 c50"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c78">Version </span><span class="c47 c40 c78">5</span></p></div><hr class="c35"><div><p class="c13"><a href="https://docs.google.com/document/d/e/2PACX-1vT8QgiqTMxDOle5EHnZfoUSRBFAKJ7QPfMibO0h6Jr5NID7e5aBIO3-cCRcEgtcxlGeFRoXZ3sAXGnr/pub#ftnt_ref1" id="ftnt1">[1]</a><span class="c46">&nbsp;Derived from </span><span class="c18"><a class="c37" href="https://www.google.com/url?q=http://archive.ics.uci.edu/ml/datasets/EEG%2BEye%2BState%23&amp;sa=D&amp;ust=1555470516193000">http://archive.ics.uci.edu/ml/datasets/EEG+Eye+State#</a></span><span class="c12 c46">&nbsp;</span></p></div></div><div id="footer"><span>通过<a target="_blank" title="Learn more about Google Drive" href="https://docs.google.com/">Google云端硬盘</a>发布</span><span class="dash">–</span><a href="https://docs.google.com/abuse?id=e/2PACX-1vT8QgiqTMxDOle5EHnZfoUSRBFAKJ7QPfMibO0h6Jr5NID7e5aBIO3-cCRcEgtcxlGeFRoXZ3sAXGnr">举报滥用行为</a><span class="dash">–</span><span>每5分钟自动更新一次</span></div><script type="text/javascript" nonce="">(function(){function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var ba="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ca;if("function"==typeof Object.setPrototypeOf)ca=Object.setPrototypeOf;else{var ea;a:{var fa={s:!0},ha={};try{ha.__proto__=fa;ea=ha.s;break a}catch(a){}ea=!1}ca=ea?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var ia=ca;
function m(a,b){a.prototype=ba(b.prototype);a.prototype.constructor=a;if(ia)ia(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.j=b.prototype}var ja="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global&&null!=global?global:this,ka="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};
function la(a,b){if(b){var c=ja;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ka(c,a,{configurable:!0,writable:!0,value:b})}}function n(a,b){return Object.prototype.hasOwnProperty.call(a,b)}
la("WeakMap",function(a){function b(g){this.a=(h+=Math.random()+1).toString();if(g){var k="undefined"!=typeof Symbol&&Symbol.iterator&&g[Symbol.iterator];for(g=k?k.call(g):{next:aa(g)};!(k=g.next()).done;)k=k.value,this.set(k[0],k[1])}}function c(){}function d(g){if(!n(g,f)){var k=new c;ka(g,f,{value:k})}}function e(g){var k=Object[g];k&&(Object[g]=function(l){if(l instanceof c)return l;d(l);return k(l)})}if(function(){if(!a||!Object.seal)return!1;try{var g=Object.seal({}),k=Object.seal({}),l=new a([[g,
2],[k,3]]);if(2!=l.get(g)||3!=l.get(k))return!1;l.delete(g);l.set(k,4);return!l.has(g)&&4==l.get(k)}catch(da){return!1}}())return a;var f="$jscomp_hidden_"+Math.random();e("freeze");e("preventExtensions");e("seal");var h=0;b.prototype.set=function(g,k){d(g);if(!n(g,f))throw Error("WeakMap key fail: "+g);g[f][this.a]=k;return this};b.prototype.get=function(g){return n(g,f)?g[f][this.a]:void 0};b.prototype.has=function(g){return n(g,f)&&n(g[f],this.a)};b.prototype.delete=function(g){return n(g,f)&&
n(g[f],this.a)?delete g[f][this.a]:!1};return b});var p=this;function ma(){}
function q(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function na(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function oa(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}
function pa(a,b){function c(){}c.prototype=b.prototype;a.j=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.w=function(d,e,f){for(var h=Array(arguments.length-2),g=2;g<arguments.length;g++)h[g-2]=arguments[g];return b.prototype[e].apply(d,h)}};function qa(a){qa[" "](a);return a}qa[" "]=ma;function ra(a,b,c){return Object.prototype.hasOwnProperty.call(a,b)?a[b]:a[b]=c(b)};function sa(a){return ra(a.prototype,"$$generatedClassName",function(){return"Class$obf_"+{valueOf:function(){return++ta}}})}var ta=1E3;function r(){}r.prototype.g=function(){return ua(this)};r.prototype.toString=function(){return t(u(v(this.constructor)))+"@"+t((this.g()>>>0).toString(16))};function w(){this.a=!1}m(w,r);w.prototype.f=function(a){return Error(a)};function va(a,b){a.b=b;if(null!=b)try{b.o=a}catch(c){}}function wa(a){if(a.a&&"__noinit__"!==a.b){var b=null==a.c?null:a.c.replace(/\n/g,"\u200b\n");b=xa(a,b);b=a.f(b);if(!("stack"in b))try{throw b;}catch(c){}va(a,b)}}w.prototype.toString=function(){return xa(this,this.c)};function xa(a,b){a=u(v(a.constructor));return null==b?a:t(a)+": "+t(b)};function ya(){this.a=!1}m(ya,w);function za(){this.a=!1}m(za,ya);function Aa(a,b){this.b=a;this.a=b}m(Aa,r);function u(a){var b=sa(a.b);0!=a.a&&(b="L"+t(b)+";");a=a.a;for(var c="",d=0;d<a;d++)c=t(c)+"[";return t(c)+t(b)}Aa.prototype.toString=function(){return"class "+t(u(this))};function v(a,b){var c=b||0;return ra(a.prototype,"$$class/"+c,function(){return new Aa(a,c)})};function Ba(){this.a=!1}m(Ba,za);function Ca(){this.a=!1}m(Ca,Ba);Ca.prototype.f=function(a){return new TypeError(a)};function Da(a,b){return"string"==typeof a?a.charCodeAt(b):a.C(b)};function ua(a){return a.l||(Object.defineProperties(a,{l:{value:++Ea,enumerable:!1}}),a.l)}var Ea=0;function t(a){if(null==a)a="null";else if(a instanceof Array){var b=a.v;a=u(b?v(b.B,b.A):v(r,1))+"@"+(ua(a)>>>0).toString(16)}else a=a.toString();return a}function Fa(a){if(65536<=a){var b=56320+(a-65536&1023)&65535;return t(String.fromCharCode(55296+(a-65536>>10&1023)&65535))+t(String.fromCharCode(b))}return String.fromCharCode(a&65535)}
function Ga(a,b){var c=b,d=a.length;b=Da(a,c++);var e;if(d=55296<=b&&56319>=b&&c<d)a=e=Da(a,c),d=56320<=a&&57343>=a;var f;d?f=65536+((b&1023)<<10)+(e&1023):f=b;return f}function Ha(a,b){return a===b||null==a&&null==b};function Ia(a,b){return null==a?a:b?decodeURI(a):decodeURIComponent(a)};var Ja=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\S\s]*))?$/;function Ka(a){a=Ja.exec(a);for(var b=[],c=0;7>=c;c++)a.length<=c||null==a[c]?b.push(null):b.push(a[c]);return b}
function La(a,b){var c=Fa(35);c=a.indexOf(c);c=0>c?a.length:c;a:{var d=0;for(var e=b.length;0<(d=a.indexOf(b,d))&&d<c;){var f=Ga(a,d-1);if(38==f||63==f){if(d+e>=a.length)break a;f=Ga(a,d+e);if(61==f||38==f||35==f)break a}d+=e+1}d=-1}if(0>d)return null;e=d;f=Fa(38);e=a.indexOf(f,e);if(0>e||e>c)e=c;d+=b.length+1;b=Math.min(a.length,d);a=a.substr(b,Math.min(a.length,Math.max(d,e))-b);c=" ";for(b=0;0<=(b=c.indexOf("\\",b));)36==c.charCodeAt(b+1)?(d=t(c.substr(0,b))+"$",e=++b,c=d+t(c.substr(e))):(d=t(c.substr(0,
b)),e=++b,c=d+t(c.substr(e)));a=a.replace(/\+/g,c);return Ia(a,!1)};var Ma=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},Na=/&/g,Oa=/</g,Pa=/>/g,Qa=/"/g,Ra=/'/g,Sa=/\x00/g,Ta=/[\x00&<>"']/;function Ua(a,b){return a<b?-1:a>b?1:0};var Va=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"==typeof a)return"string"==typeof b&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};function y(a,b){this.a=[];this.b=b;for(var c=!0,d=a.length-1;0<=d;d--){var e=a[d]|0;c&&e==b||(this.a[d]=e,c=!1)}}var Wa={};function z(a){if(-128<=a&&128>a){var b=Wa[a];if(b)return b}b=new y([a|0],0>a?-1:0);-128<=a&&128>a&&(Wa[a]=b);return b}function A(a){if(isNaN(a)||!isFinite(a))return B;if(0>a)return C(A(-a));for(var b=[],c=1,d=0;a>=c;d++)b[d]=a/c|0,c*=4294967296;return new y(b,0)}var B=z(0),D=z(1),Xa=z(16777216);
function E(a){if(-1==a.b)return-E(C(a));for(var b=0,c=1,d=0;d<a.a.length;d++){var e=F(a,d);b+=(0<=e?e:4294967296+e)*c;c*=4294967296}return b}y.prototype.toString=function(a){a=a||10;if(2>a||36<a)throw Error("radix out of range: "+a);if(G(this))return"0";if(-1==this.b)return"-"+C(this).toString(a);for(var b=A(Math.pow(a,6)),c=this,d="";;){var e=H(c,b);c=I(c,J(e,b));var f=((0<c.a.length?c.a[0]:c.b)>>>0).toString(a);c=e;if(G(c))return f+d;for(;6>f.length;)f="0"+f;d=f+d}};
function F(a,b){return 0>b?0:b<a.a.length?a.a[b]:a.b}function G(a){if(0!=a.b)return!1;for(var b=0;b<a.a.length;b++)if(0!=a.a[b])return!1;return!0}function K(a,b){a=I(a,b);return-1==a.b?-1:G(a)?0:1}function C(a){for(var b=a.a.length,c=[],d=0;d<b;d++)c[d]=~a.a[d];return(new y(c,~a.b)).add(D)}
y.prototype.add=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0,e=0;e<=b;e++){var f=d+(F(this,e)&65535)+(F(a,e)&65535),h=(f>>>16)+(F(this,e)>>>16)+(F(a,e)>>>16);d=h>>>16;f&=65535;h&=65535;c[e]=h<<16|f}return new y(c,c[c.length-1]&-2147483648?-1:0)};function I(a,b){return a.add(C(b))}
function J(a,b){if(G(a)||G(b))return B;if(-1==a.b)return-1==b.b?J(C(a),C(b)):C(J(C(a),b));if(-1==b.b)return C(J(a,C(b)));if(0>K(a,Xa)&&0>K(b,Xa))return A(E(a)*E(b));for(var c=a.a.length+b.a.length,d=[],e=0;e<2*c;e++)d[e]=0;for(e=0;e<a.a.length;e++)for(var f=0;f<b.a.length;f++){var h=F(a,e)>>>16,g=F(a,e)&65535,k=F(b,f)>>>16,l=F(b,f)&65535;d[2*e+2*f]+=g*l;L(d,2*e+2*f);d[2*e+2*f+1]+=h*l;L(d,2*e+2*f+1);d[2*e+2*f+1]+=g*k;L(d,2*e+2*f+1);d[2*e+2*f+2]+=h*k;L(d,2*e+2*f+2)}for(e=0;e<c;e++)d[e]=d[2*e+1]<<16|
d[2*e];for(e=c;e<2*c;e++)d[e]=0;return new y(d,0)}function L(a,b){for(;(a[b]&65535)!=a[b];)a[b+1]+=a[b]>>>16,a[b]&=65535,b++}
function H(a,b){if(G(b))throw Error("division by zero");if(G(a))return B;if(-1==a.b)return-1==b.b?H(C(a),C(b)):C(H(C(a),b));if(-1==b.b)return C(H(a,C(b)));if(30<a.a.length){if(-1==a.b||-1==b.b)throw Error("slowDivide_ only works with positive integers.");for(var c=D;0>=K(b,a);)c=Ya(c,1),b=Ya(b,1);var d=M(c,1),e=M(b,1);b=M(b,2);for(c=M(c,2);!G(b);){var f=e.add(b);0>=K(f,a)&&(d=d.add(c),e=f);b=M(b,1);c=M(c,1)}return d}for(c=B;0<=K(a,b);){d=Math.max(1,Math.floor(E(a)/E(b)));e=Math.ceil(Math.log(d)/Math.LN2);
e=48>=e?1:Math.pow(2,e-48);f=A(d);for(var h=J(f,b);-1==h.b||0<K(h,a);)d-=e,f=A(d),h=J(f,b);G(f)&&(f=D);c=c.add(f);a=I(a,h)}return c}y.prototype.and=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=F(this,d)&F(a,d);return new y(c,this.b&a.b)};y.prototype.or=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=F(this,d)|F(a,d);return new y(c,this.b|a.b)};
y.prototype.xor=function(a){for(var b=Math.max(this.a.length,a.a.length),c=[],d=0;d<b;d++)c[d]=F(this,d)^F(a,d);return new y(c,this.b^a.b)};function Ya(a,b){var c=b>>5;b%=32;for(var d=a.a.length+c+(0<b?1:0),e=[],f=0;f<d;f++)e[f]=0<b?F(a,f-c)<<b|F(a,f-c-1)>>>32-b:F(a,f-c);return new y(e,a.b)}function M(a,b){var c=b>>5;b%=32;for(var d=a.a.length-c,e=[],f=0;f<d;f++)e[f]=0<b?F(a,f+c)>>>b|F(a,f+c+1)<<32-b:F(a,f+c);return new y(e,a.b)};function Za(a,b,c){for(var d in a)b.call(c,a[d],d,a)};I(Ya(D,32),D);z(65535);I(Ya(D,128),D);var N;a:{var $a=p.navigator;if($a){var ab=$a.userAgent;if(ab){N=ab;break a}}N=""}function O(a){return-1!=N.indexOf(a)};var bb=O("Opera"),P=O("Trident")||O("MSIE"),cb=O("Edge"),db=cb||P,eb=O("Gecko")&&!(-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"))&&!(O("Trident")||O("MSIE"))&&!O("Edge"),fb=-1!=N.toLowerCase().indexOf("webkit")&&!O("Edge"),gb=O("Macintosh");function hb(){var a=p.document;return a?a.documentMode:void 0}var ib;
a:{var jb="",kb=function(){var a=N;if(eb)return/rv:([^\);]+)(\)|;)/.exec(a);if(cb)return/Edge\/([\d\.]+)/.exec(a);if(P)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(fb)return/WebKit\/(\S+)/.exec(a);if(bb)return/(?:Version)[ \/]?(\S+)/.exec(a)}();kb&&(jb=kb?kb[1]:"");if(P){var lb=hb();if(null!=lb&&lb>parseFloat(jb)){ib=String(lb);break a}}ib=jb}var mb=ib,nb={},ob;var pb=p.document;ob=pb&&P?hb()||("CSS1Compat"==pb.compatMode?parseInt(mb,10):5):void 0;function S(){this.b=this.b;this.a=this.a}S.prototype.b=!1;S.prototype.m=function(){this.b||(this.b=!0,this.f())};S.prototype.f=function(){if(this.a)for(;this.a.length;)this.a.shift()()};function qb(a){a&&"function"==typeof a.m&&a.m()};function T(){this.c="";this.f=rb}T.prototype.b=!0;T.prototype.a=function(){return this.c.toString()};function sb(a){if(a instanceof T&&a.constructor===T&&a.f===rb)return a.c;q(a);return"type_error:SafeUrl"}var tb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,rb={};function ub(a){var b=new T;b.c=a;return b};function U(){this.c="";this.f=vb}U.prototype.b=!0;U.prototype.a=function(){return this.c.toString()};function wb(a){if(a instanceof U&&a.constructor===U&&a.f===vb)return a.c;q(a);return"type_error:SafeHtml"}var vb={};var xb=!P||9<=Number(ob),yb=!P||9<=Number(ob),zb=P&&!ra(nb,"9",function(){for(var a=0,b=Ma(String(mb)).split("."),c=Ma("9").split("."),d=Math.max(b.length,c.length),e=0;0==a&&e<d;e++){var f=b[e]||"",h=c[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==f[0].length&&0==h[0].length)break;a=Ua(0==f[1].length?0:parseInt(f[1],10),0==h[1].length?0:parseInt(h[1],10))||Ua(0==f[2].length,0==h[2].length)||Ua(f[2],h[2]);f=f[3];h=h[3]}while(0==a)}return 0<=a}),
Ab=function(){if(!p.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{p.addEventListener("test",ma,b),p.removeEventListener("test",ma,b)}catch(c){}return a}();function Bb(a,b){this.type=a;this.a=this.target=b;this.f=!1}Bb.prototype.c=function(){this.f=!0};function V(a,b){Bb.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.b=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(eb){a:{try{qa(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==
c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"==typeof a.pointerType?a.pointerType:Cb[a.pointerType]||"";this.b=a;a.defaultPrevented&&this.c()}}pa(V,Bb);var Db=[1,4,2],Cb={2:"touch",3:"pen",4:"mouse"};V.prototype.c=function(){V.j.c.call(this);var a=this.b;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,zb)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var Eb="closure_listenable_"+(1E6*Math.random()|0),Fb=0;function Gb(a,b,c,d,e){this.listener=a;this.a=null;this.src=b;this.type=c;this.capture=!!d;this.b=e;this.key=++Fb;this.h=this.i=!1}function Hb(a){a.h=!0;a.listener=null;a.a=null;a.src=null;a.b=null};function Ib(a){this.src=a;this.a={};this.b=0}Ib.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h;a:{for(h=0;h<a.length;++h){var g=a[h];if(!g.h&&g.listener==b&&g.capture==!!d&&g.b==e)break a}h=-1}-1<h?(b=a[h],c||(b.i=!1)):(b=new Gb(b,this.src,f,!!d,e),b.i=c,a.push(b));return b};var Jb="closure_lm_"+(1E6*Math.random()|0),Kb={},Lb=0;function Mb(a,b,c,d,e){if(d&&d.once)return Nb(a,b,c,d,e);if("array"==q(b)){for(var f=0;f<b.length;f++)Mb(a,b[f],c,d,e);return null}c=Ob(c);return a&&a[Eb]?a.a(b,c,na(d)?!!d.capture:!!d,e):Pb(a,b,c,!1,d,e)}
function Pb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=na(e)?!!e.capture:!!e,g=Qb(a);g||(a[Jb]=g=new Ib(a));c=g.add(b,c,d,h,f);if(c.a)return c;d=Rb();c.a=d;d.src=a;d.listener=c;if(a.addEventListener)Ab||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(Sb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");Lb++;return c}
function Rb(){var a=Tb,b=yb?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function Nb(a,b,c,d,e){if("array"==q(b)){for(var f=0;f<b.length;f++)Nb(a,b[f],c,d,e);return null}c=Ob(c);return a&&a[Eb]?a.b(b,c,na(d)?!!d.capture:!!d,e):Pb(a,b,c,!0,d,e)}
function Ub(a){if("number"!=typeof a&&a&&!a.h){var b=a.src;if(b&&b[Eb])b.c(a);else{var c=a.type,d=a.a;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Sb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);Lb--;if(c=Qb(b)){d=a.type;if(d in c.a){var e=c.a[d],f=Va(e,a),h;(h=0<=f)&&Array.prototype.splice.call(e,f,1);h&&(Hb(a),0==c.a[d].length&&(delete c.a[d],c.b--))}0==c.b&&(c.src=null,b[Jb]=null)}else Hb(a)}}}
function Sb(a){return a in Kb?Kb[a]:Kb[a]="on"+a}function Vb(a,b,c,d){var e=!0;if(a=Qb(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.h&&(f=Wb(f,d),e=e&&!1!==f)}return e}function Wb(a,b){var c=a.listener,d=a.b||a.src;a.i&&Ub(a);return c.call(d,b)}
function Tb(a,b){if(a.h)return!0;if(!yb){if(!b)a:{b=["window","event"];for(var c=p,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new V(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.a;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.a=d[e];var f=Vb(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.a=d[e],f=Vb(d[e],a,!1,b),c=c&&f}return c}return Wb(a,
new V(b,this))}function Qb(a){a=a[Jb];return a instanceof Ib?a:null}var Xb="__closure_events_fn_"+(1E9*Math.random()>>>0);function Ob(a){if("function"==q(a))return a;a[Xb]||(a[Xb]=function(b){return a.handleEvent(b)});return a[Xb]};function W(a){S.call(this);this.g=a;this.c={}}pa(W,S);var Yb=[];function Zb(a){Za(a.c,function(b,c){this.c.hasOwnProperty(c)&&Ub(b)},a);a.c={}}W.prototype.f=function(){W.j.f.call(this);Zb(this)};W.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function $b(a){S.call(this);this.c=a||document.body;this.g=new W(this);a=oa(qb,this.g);this.b?a():(this.a||(this.a=[]),this.a.push(a));a=this.g;var b=this.c,c=this.u,d="click";"array"!=q(d)&&(d&&(Yb[0]=d.toString()),d=Yb);for(var e=0;e<d.length;e++){var f=Mb(b,d[e],c||a.handleEvent,!1,a.g||a);if(!f)break;a.c[f.key]=f}}pa($b,S);
$b.prototype.u=function(a){if((xb?0==a.b.button:"click"==a.type||a.b.button&Db[0])&&!(fb&&gb&&a.ctrlKey)&&!a.f)for(var b=a.target;b&&b!=this.c;){if(b.tagName&&"a"==b.tagName.toLowerCase()){var c=b.getAttribute("href")||b.getAttributeNS("http://www.w3.org/1999/xlink","href"),d=c;var e=d;try{var f=void 0,h=Ka(d)[3];f=null==h?null:h;var g=Ia(f,!0);var k;if(k=Ha("www.google.com",g)){var l=Ka(d)[5];k=Ha("/url",Ia(l,!0))}if(k){var da=La(d,"q");e=da?da:La(d,"url")}}catch(Q){a:{d=Q;if(null!=d&&(f=d.o,null!=
f)){Q=f;break a}if(d instanceof TypeError){var x=f=new Ca,R=x;R.a=!0;R.b="__noinit__";wa(x);va(x,d);x.c=t(d);d=f}else R=x=f=new Ba,R.a=!0,R.b="__noinit__",wa(x),va(x,d),x.c=t(d),d=f;Q=d}if(!(Q instanceof ya))throw Q.b;}e=null!=e?e:"";if(c!=e){k=void 0;h=e;b={target:"_blank",noreferrer:!0};c=window;h instanceof T?g=h:(g="undefined"!=typeof h.href?h.href:String(h),g instanceof T||(g="object"==typeof g&&g.b?g.a():String(g),tb.test(g)||(g="about:invalid#zClosurez"),g=ub(g)));h=b.target||h.target;l=[];
for(k in b)switch(k){case "width":case "height":case "top":case "left":l.push(k+"="+b[k]);break;case "target":case "noopener":case "noreferrer":break;default:l.push(k+"="+(b[k]?1:0))}k=l.join(",");(O("iPhone")&&!O("iPod")&&!O("iPad")||O("iPad")||O("iPod"))&&c.navigator&&c.navigator.standalone&&h&&"_self"!=h?(l=k=c.document.createElement("A"),g instanceof T||g instanceof T||(g="object"==typeof g&&g.b?g.a():String(g),tb.test(g)||(g="about:invalid#zClosurez"),g=ub(g)),l.href=sb(g),k.setAttribute("target",
h),b.noreferrer&&k.setAttribute("rel","noreferrer"),b=document.createEvent("MouseEvent"),b.initMouseEvent("click",!0,!0,c,1),k.dispatchEvent(b)):b.noreferrer?(c=c.open("",h,k),b=sb(g).toString(),c&&(db&&-1!=b.indexOf(";")&&(b="'"+b.replace(/'/g,"%27")+"'"),c.opener=null,Ta.test(b)&&(-1!=b.indexOf("&")&&(b=b.replace(Na,"&amp;")),-1!=b.indexOf("<")&&(b=b.replace(Oa,"&lt;")),-1!=b.indexOf(">")&&(b=b.replace(Pa,"&gt;")),-1!=b.indexOf('"')&&(b=b.replace(Qa,"&quot;")),-1!=b.indexOf("'")&&(b=b.replace(Ra,
"&#39;")),-1!=b.indexOf("\x00")&&(b=b.replace(Sa,"&#0;"))),g=new U,g.c='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+b+'">',c.document.write(wb(g)),c.document.close())):(c=c.open(sb(g).toString(),h,k))&&b.noopener&&(c.opener=null);a.c();break}}b=b.parentNode}};function ac(a){new $b(a)}var X=["DOCS_installLinkReferrerSanitizer"],Y=p;X[0]in Y||"undefined"==typeof Y.execScript||Y.execScript("var "+X[0]);
for(var Z;X.length&&(Z=X.shift());)X.length||void 0===ac?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=ac;}).call(this);
</script><script type="text/javascript" nonce="">DOCS_installLinkReferrerSanitizer();</script></body><div id="cye-workaround-body" style="position: absolute; left: 0px; top: 0px; z-index: -2147483646; background: none 0% 0% / auto repeat scroll padding-box border-box white; height: 7707px; width: 1920px;"></div><div id="cye-workaround-body-image" style="position: absolute; left: 0px; top: 0px; z-index: -2147483645; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0); height: 7707px; width: 1920px;"></div></html>