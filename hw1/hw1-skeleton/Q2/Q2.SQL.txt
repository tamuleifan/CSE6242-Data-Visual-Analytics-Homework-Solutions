-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies(
	id integer,
	name text,
	score integer
	);

CREATE TABLE movie_cast(
	movie_id integer,
	cast_id integer,
	cast_name text
	);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.separator ","
.import movie-name-score.txt movies
.import movie-cast.txt movie_cast



-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]
SELECT cast(count(score) AS real) /cast((SELECT count(score) FROM movies) AS real) AS prop
FROM movies
WHERE score > 50;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]
SELECT 
	id,
	name,
	score
FROM 
	movies
ORDER BY 
	score DESC,
	name ASC
LIMIT 
	7;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]
SELECT 
	cast_id,
	cast_name,
	count(cast_id) AS movie_count
FROM 
	movie_cast
GROUP BY 
	cast_id
ORDER BY 
	movie_count DESC,
	cast_name ASC
LIMIT 
	5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
SELECT 
	cast_id,
	cast_name,
	(cast_score_table.cast_score)*1.0 / (cast_score_table.cast_count)*1.0 as average_score
From(
	SELECT 
		cast_id,
		cast_name,
		sum(score) AS cast_score,
		count(cast_id) AS cast_count
	FROM
		movie_cast
	LEFT JOIN movies ON movie_cast.movie_id = movies.id
	WHERE
		score > 50
	GROUP BY
		cast_id
	HAVING
		count(movie_id) > 2) AS cast_score_table
ORDER BY
	average_score DESC,
	cast_name ASC
LIMIT
	10;




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW good_collaboration
AS
SELECT
	d1.cast_id AS cast_member_id1,
	d2.cast_id AS cast_member_id2,
	count(d1.movie_id) AS movie_count,
	(sum(movies.score)*1.0) / (count(d1.movie_id) *1.0) AS average_movie_score
FROM
	movie_cast d1 
	INNER JOIN movie_cast d2 ON d1.movie_id = d2.movie_id
	INNER JOIN movies ON d1.movie_id = movies.id
WHERE
	d1.cast_id < d2.cast_id
	AND movies.score >= 40
GROUP BY
	d1.cast_id,
	d2.cast_id
HAVING
	movie_count >= 3
ORDER BY
	d1.cast_id ASC,
	average_movie_score DESC
;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]
SELECT
	cast_member_id1 AS cast_id,
	cast_name,
	(sum(average_movie_score)*1.0) / (count(average_movie_score)*1.0) AS collaboration_score
FROM
	good_collaboration
	INNER JOIN movie_cast ON good_collaboration.cast_member_id1 = movie_cast.cast_id
GROUP BY
	cast_member_id1
ORDER BY
	collaboration_score DESC,
	cast_name ASC
LIMIT
	5;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview
USING fts4(
	id,
	name,
	year,
	overview,
	popularity
);

.separator ","
.import movie-overview.txt movie_overview



-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
SELECT 
	count(overview) AS count_overview
FROM 
	movie_overview
WHERE
	overview MATCH 'fight';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]
SELECT
	id
FROM 
	movie_overview
WHERE
	overview MATCH 'love NEAR/5 story';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --